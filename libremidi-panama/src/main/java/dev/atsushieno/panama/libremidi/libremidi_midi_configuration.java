// Generated by jextract

package dev.atsushieno.panama.libremidi;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct libremidi_midi_configuration {
 *     enum {
 *         MIDI1,
 *         MIDI2
 *     } version;
 *     union {
 *         libremidi_midi_in_port *in_port;
 *         libremidi_midi_out_port *out_port;
 *     };
 *     union {
 *         struct {
 *             void *context;
 *             void (*callback)(void *, const midi1_symbol *, size_t);
 *         } on_midi1_message;
 *         struct {
 *             void *context;
 *             void (*callback)(void *, const midi2_symbol *, size_t);
 *         } on_midi2_message;
 *     };
 *     struct {
 *         void *context;
 *         libremidi_timestamp (*callback)(void *, libremidi_timestamp);
 *     } get_timestamp;
 *     struct {
 *         void *context;
 *         void (*callback)(void *, const char *, size_t, const void *);
 *     } on_error;
 *     struct {
 *         void *context;
 *         void (*callback)(void *, const char *, size_t, const void *);
 *     } on_warning;
 *     const char *port_name;
 *     bool virtual_port;
 *     bool ignore_sysex;
 *     bool ignore_timing;
 *     bool ignore_sensing;
 *     enum libremidi_timestamp_mode timestamps;
 * }
 * }
 */
public class libremidi_midi_configuration {

    libremidi_midi_configuration() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        libremidi_c_h.C_INT.withName("version"),
        MemoryLayout.paddingLayout(4),
        MemoryLayout.unionLayout(
            libremidi_c_h.C_POINTER.withName("in_port"),
            libremidi_c_h.C_POINTER.withName("out_port")
        ).withName("union (anonymous at ./external/libremidi/include/libremidi/libremidi-c.h:130:3)"),
        MemoryLayout.unionLayout(
            libremidi_midi_configuration.struct_unnamed_1.layout().withName("on_midi1_message"),
            libremidi_midi_configuration.struct_unnamed_2.layout().withName("on_midi2_message")
        ).withName("union (anonymous at ./external/libremidi/include/libremidi/libremidi-c.h:136:3)"),
        libremidi_midi_configuration.struct_unnamed_3.layout().withName("get_timestamp"),
        libremidi_midi_configuration.struct_unnamed_4.layout().withName("on_error"),
        libremidi_midi_configuration.struct_unnamed_5.layout().withName("on_warning"),
        libremidi_c_h.C_POINTER.withName("port_name"),
        libremidi_c_h.C_BOOL.withName("virtual_port"),
        libremidi_c_h.C_BOOL.withName("ignore_sysex"),
        libremidi_c_h.C_BOOL.withName("ignore_timing"),
        libremidi_c_h.C_BOOL.withName("ignore_sensing"),
        libremidi_c_h.C_INT.withName("timestamps")
    ).withName("libremidi_midi_configuration");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum {
     *     MIDI1,
     *     MIDI2
     * } version
     * }
     */
    public static final OfInt version$layout() {
        return version$LAYOUT;
    }

    private static final long version$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum {
     *     MIDI1,
     *     MIDI2
     * } version
     * }
     */
    public static final long version$offset() {
        return version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum {
     *     MIDI1,
     *     MIDI2
     * } version
     * }
     */
    public static int version(MemorySegment struct) {
        return struct.get(version$LAYOUT, version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum {
     *     MIDI1,
     *     MIDI2
     * } version
     * }
     */
    public static void version(MemorySegment struct, int fieldValue) {
        struct.set(version$LAYOUT, version$OFFSET, fieldValue);
    }

    private static final AddressLayout in_port$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("$anon$130:3"), groupElement("in_port"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * libremidi_midi_in_port *in_port
     * }
     */
    public static final AddressLayout in_port$layout() {
        return in_port$LAYOUT;
    }

    private static final long in_port$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * libremidi_midi_in_port *in_port
     * }
     */
    public static final long in_port$offset() {
        return in_port$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * libremidi_midi_in_port *in_port
     * }
     */
    public static MemorySegment in_port(MemorySegment struct) {
        return struct.get(in_port$LAYOUT, in_port$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * libremidi_midi_in_port *in_port
     * }
     */
    public static void in_port(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(in_port$LAYOUT, in_port$OFFSET, fieldValue);
    }

    private static final AddressLayout out_port$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("$anon$130:3"), groupElement("out_port"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * libremidi_midi_out_port *out_port
     * }
     */
    public static final AddressLayout out_port$layout() {
        return out_port$LAYOUT;
    }

    private static final long out_port$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * libremidi_midi_out_port *out_port
     * }
     */
    public static final long out_port$offset() {
        return out_port$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * libremidi_midi_out_port *out_port
     * }
     */
    public static MemorySegment out_port(MemorySegment struct) {
        return struct.get(out_port$LAYOUT, out_port$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * libremidi_midi_out_port *out_port
     * }
     */
    public static void out_port(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(out_port$LAYOUT, out_port$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const midi1_symbol *, size_t);
     * }
     * }
     */
    public static class struct_unnamed_1 {

        struct_unnamed_1() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            libremidi_c_h.C_POINTER.withName("context"),
            libremidi_c_h.C_POINTER.withName("callback")
        ).withName("struct (unnamed at ./external/libremidi/include/libremidi/libremidi-c.h:138:5)");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final AddressLayout context$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("context"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * void *context
         * }
         */
        public static final AddressLayout context$layout() {
            return context$LAYOUT;
        }

        private static final long context$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * void *context
         * }
         */
        public static final long context$offset() {
            return context$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * void *context
         * }
         */
        public static MemorySegment context(MemorySegment struct) {
            return struct.get(context$LAYOUT, context$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * void *context
         * }
         */
        public static void context(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(context$LAYOUT, context$OFFSET, fieldValue);
        }

        /**
         * {@snippet lang=c :
         * void (*callback)(void *, const midi1_symbol *, size_t)
         * }
         */
        public static class callback {

            callback() {
                // Should not be called directly
            }

            /**
             * The function pointer signature, expressed as a functional interface
             */
            public interface Function {
                void apply(MemorySegment _x0, MemorySegment _x1, long _x2);
            }

            private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
                libremidi_c_h.C_POINTER,
                libremidi_c_h.C_POINTER,
                libremidi_c_h.C_LONG
            );

            /**
             * The descriptor of this function pointer
             */
            public static FunctionDescriptor descriptor() {
                return $DESC;
            }

            private static final MethodHandle UP$MH = libremidi_c_h.upcallHandle(callback.Function.class, "apply", $DESC);

            /**
             * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
             * The lifetime of the returned segment is managed by {@code arena}
             */
            public static MemorySegment allocate(callback.Function fi, Arena arena) {
                return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
            }

            private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

            /**
             * Invoke the upcall stub {@code funcPtr}, with given parameters
             */
            public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, long _x2) {
                try {
                     DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            }
        }

        private static final AddressLayout callback$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("callback"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * void (*callback)(void *, const midi1_symbol *, size_t)
         * }
         */
        public static final AddressLayout callback$layout() {
            return callback$LAYOUT;
        }

        private static final long callback$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * void (*callback)(void *, const midi1_symbol *, size_t)
         * }
         */
        public static final long callback$offset() {
            return callback$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * void (*callback)(void *, const midi1_symbol *, size_t)
         * }
         */
        public static MemorySegment callback(MemorySegment struct) {
            return struct.get(callback$LAYOUT, callback$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * void (*callback)(void *, const midi1_symbol *, size_t)
         * }
         */
        public static void callback(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(callback$LAYOUT, callback$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout on_midi1_message$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$136:3"), groupElement("on_midi1_message"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const midi1_symbol *, size_t);
     * } on_midi1_message
     * }
     */
    public static final GroupLayout on_midi1_message$layout() {
        return on_midi1_message$LAYOUT;
    }

    private static final long on_midi1_message$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const midi1_symbol *, size_t);
     * } on_midi1_message
     * }
     */
    public static final long on_midi1_message$offset() {
        return on_midi1_message$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const midi1_symbol *, size_t);
     * } on_midi1_message
     * }
     */
    public static MemorySegment on_midi1_message(MemorySegment struct) {
        return struct.asSlice(on_midi1_message$OFFSET, on_midi1_message$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const midi1_symbol *, size_t);
     * } on_midi1_message
     * }
     */
    public static void on_midi1_message(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, on_midi1_message$OFFSET, on_midi1_message$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const midi2_symbol *, size_t);
     * }
     * }
     */
    public static class struct_unnamed_2 {

        struct_unnamed_2() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            libremidi_c_h.C_POINTER.withName("context"),
            libremidi_c_h.C_POINTER.withName("callback")
        ).withName("struct (unnamed at ./external/libremidi/include/libremidi/libremidi-c.h:143:5)");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final AddressLayout context$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("context"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * void *context
         * }
         */
        public static final AddressLayout context$layout() {
            return context$LAYOUT;
        }

        private static final long context$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * void *context
         * }
         */
        public static final long context$offset() {
            return context$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * void *context
         * }
         */
        public static MemorySegment context(MemorySegment struct) {
            return struct.get(context$LAYOUT, context$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * void *context
         * }
         */
        public static void context(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(context$LAYOUT, context$OFFSET, fieldValue);
        }

        /**
         * {@snippet lang=c :
         * void (*callback)(void *, const midi2_symbol *, size_t)
         * }
         */
        public static class callback {

            callback() {
                // Should not be called directly
            }

            /**
             * The function pointer signature, expressed as a functional interface
             */
            public interface Function {
                void apply(MemorySegment _x0, MemorySegment _x1, long _x2);
            }

            private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
                libremidi_c_h.C_POINTER,
                libremidi_c_h.C_POINTER,
                libremidi_c_h.C_LONG
            );

            /**
             * The descriptor of this function pointer
             */
            public static FunctionDescriptor descriptor() {
                return $DESC;
            }

            private static final MethodHandle UP$MH = libremidi_c_h.upcallHandle(callback.Function.class, "apply", $DESC);

            /**
             * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
             * The lifetime of the returned segment is managed by {@code arena}
             */
            public static MemorySegment allocate(callback.Function fi, Arena arena) {
                return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
            }

            private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

            /**
             * Invoke the upcall stub {@code funcPtr}, with given parameters
             */
            public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, long _x2) {
                try {
                     DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            }
        }

        private static final AddressLayout callback$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("callback"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * void (*callback)(void *, const midi2_symbol *, size_t)
         * }
         */
        public static final AddressLayout callback$layout() {
            return callback$LAYOUT;
        }

        private static final long callback$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * void (*callback)(void *, const midi2_symbol *, size_t)
         * }
         */
        public static final long callback$offset() {
            return callback$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * void (*callback)(void *, const midi2_symbol *, size_t)
         * }
         */
        public static MemorySegment callback(MemorySegment struct) {
            return struct.get(callback$LAYOUT, callback$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * void (*callback)(void *, const midi2_symbol *, size_t)
         * }
         */
        public static void callback(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(callback$LAYOUT, callback$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout on_midi2_message$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$136:3"), groupElement("on_midi2_message"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const midi2_symbol *, size_t);
     * } on_midi2_message
     * }
     */
    public static final GroupLayout on_midi2_message$layout() {
        return on_midi2_message$LAYOUT;
    }

    private static final long on_midi2_message$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const midi2_symbol *, size_t);
     * } on_midi2_message
     * }
     */
    public static final long on_midi2_message$offset() {
        return on_midi2_message$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const midi2_symbol *, size_t);
     * } on_midi2_message
     * }
     */
    public static MemorySegment on_midi2_message(MemorySegment struct) {
        return struct.asSlice(on_midi2_message$OFFSET, on_midi2_message$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const midi2_symbol *, size_t);
     * } on_midi2_message
     * }
     */
    public static void on_midi2_message(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, on_midi2_message$OFFSET, on_midi2_message$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     libremidi_timestamp (*callback)(void *, libremidi_timestamp);
     * }
     * }
     */
    public static class struct_unnamed_3 {

        struct_unnamed_3() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            libremidi_c_h.C_POINTER.withName("context"),
            libremidi_c_h.C_POINTER.withName("callback")
        ).withName("struct (unnamed at ./external/libremidi/include/libremidi/libremidi-c.h:150:3)");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final AddressLayout context$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("context"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * void *context
         * }
         */
        public static final AddressLayout context$layout() {
            return context$LAYOUT;
        }

        private static final long context$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * void *context
         * }
         */
        public static final long context$offset() {
            return context$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * void *context
         * }
         */
        public static MemorySegment context(MemorySegment struct) {
            return struct.get(context$LAYOUT, context$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * void *context
         * }
         */
        public static void context(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(context$LAYOUT, context$OFFSET, fieldValue);
        }

        /**
         * {@snippet lang=c :
         * libremidi_timestamp (*callback)(void *, libremidi_timestamp)
         * }
         */
        public static class callback {

            callback() {
                // Should not be called directly
            }

            /**
             * The function pointer signature, expressed as a functional interface
             */
            public interface Function {
                long apply(MemorySegment _x0, long _x1);
            }

            private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
                libremidi_c_h.C_LONG_LONG,
                libremidi_c_h.C_POINTER,
                libremidi_c_h.C_LONG_LONG
            );

            /**
             * The descriptor of this function pointer
             */
            public static FunctionDescriptor descriptor() {
                return $DESC;
            }

            private static final MethodHandle UP$MH = libremidi_c_h.upcallHandle(callback.Function.class, "apply", $DESC);

            /**
             * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
             * The lifetime of the returned segment is managed by {@code arena}
             */
            public static MemorySegment allocate(callback.Function fi, Arena arena) {
                return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
            }

            private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

            /**
             * Invoke the upcall stub {@code funcPtr}, with given parameters
             */
            public static long invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1) {
                try {
                    return (long) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            }
        }

        private static final AddressLayout callback$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("callback"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * libremidi_timestamp (*callback)(void *, libremidi_timestamp)
         * }
         */
        public static final AddressLayout callback$layout() {
            return callback$LAYOUT;
        }

        private static final long callback$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * libremidi_timestamp (*callback)(void *, libremidi_timestamp)
         * }
         */
        public static final long callback$offset() {
            return callback$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * libremidi_timestamp (*callback)(void *, libremidi_timestamp)
         * }
         */
        public static MemorySegment callback(MemorySegment struct) {
            return struct.get(callback$LAYOUT, callback$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * libremidi_timestamp (*callback)(void *, libremidi_timestamp)
         * }
         */
        public static void callback(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(callback$LAYOUT, callback$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout get_timestamp$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("get_timestamp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     libremidi_timestamp (*callback)(void *, libremidi_timestamp);
     * } get_timestamp
     * }
     */
    public static final GroupLayout get_timestamp$layout() {
        return get_timestamp$LAYOUT;
    }

    private static final long get_timestamp$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     libremidi_timestamp (*callback)(void *, libremidi_timestamp);
     * } get_timestamp
     * }
     */
    public static final long get_timestamp$offset() {
        return get_timestamp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     libremidi_timestamp (*callback)(void *, libremidi_timestamp);
     * } get_timestamp
     * }
     */
    public static MemorySegment get_timestamp(MemorySegment struct) {
        return struct.asSlice(get_timestamp$OFFSET, get_timestamp$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     libremidi_timestamp (*callback)(void *, libremidi_timestamp);
     * } get_timestamp
     * }
     */
    public static void get_timestamp(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, get_timestamp$OFFSET, get_timestamp$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const char *, size_t, const void *);
     * }
     * }
     */
    public static class struct_unnamed_4 {

        struct_unnamed_4() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            libremidi_c_h.C_POINTER.withName("context"),
            libremidi_c_h.C_POINTER.withName("callback")
        ).withName("struct (unnamed at ./external/libremidi/include/libremidi/libremidi-c.h:156:3)");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final AddressLayout context$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("context"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * void *context
         * }
         */
        public static final AddressLayout context$layout() {
            return context$LAYOUT;
        }

        private static final long context$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * void *context
         * }
         */
        public static final long context$offset() {
            return context$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * void *context
         * }
         */
        public static MemorySegment context(MemorySegment struct) {
            return struct.get(context$LAYOUT, context$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * void *context
         * }
         */
        public static void context(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(context$LAYOUT, context$OFFSET, fieldValue);
        }

        /**
         * {@snippet lang=c :
         * void (*callback)(void *, const char *, size_t, const void *)
         * }
         */
        public static class callback {

            callback() {
                // Should not be called directly
            }

            /**
             * The function pointer signature, expressed as a functional interface
             */
            public interface Function {
                void apply(MemorySegment _x0, MemorySegment _x1, long _x2, MemorySegment _x3);
            }

            private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
                libremidi_c_h.C_POINTER,
                libremidi_c_h.C_POINTER,
                libremidi_c_h.C_LONG,
                libremidi_c_h.C_POINTER
            );

            /**
             * The descriptor of this function pointer
             */
            public static FunctionDescriptor descriptor() {
                return $DESC;
            }

            private static final MethodHandle UP$MH = libremidi_c_h.upcallHandle(callback.Function.class, "apply", $DESC);

            /**
             * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
             * The lifetime of the returned segment is managed by {@code arena}
             */
            public static MemorySegment allocate(callback.Function fi, Arena arena) {
                return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
            }

            private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

            /**
             * Invoke the upcall stub {@code funcPtr}, with given parameters
             */
            public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, long _x2, MemorySegment _x3) {
                try {
                     DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            }
        }

        private static final AddressLayout callback$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("callback"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * void (*callback)(void *, const char *, size_t, const void *)
         * }
         */
        public static final AddressLayout callback$layout() {
            return callback$LAYOUT;
        }

        private static final long callback$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * void (*callback)(void *, const char *, size_t, const void *)
         * }
         */
        public static final long callback$offset() {
            return callback$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * void (*callback)(void *, const char *, size_t, const void *)
         * }
         */
        public static MemorySegment callback(MemorySegment struct) {
            return struct.get(callback$LAYOUT, callback$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * void (*callback)(void *, const char *, size_t, const void *)
         * }
         */
        public static void callback(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(callback$LAYOUT, callback$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout on_error$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("on_error"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const char *, size_t, const void *);
     * } on_error
     * }
     */
    public static final GroupLayout on_error$layout() {
        return on_error$LAYOUT;
    }

    private static final long on_error$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const char *, size_t, const void *);
     * } on_error
     * }
     */
    public static final long on_error$offset() {
        return on_error$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const char *, size_t, const void *);
     * } on_error
     * }
     */
    public static MemorySegment on_error(MemorySegment struct) {
        return struct.asSlice(on_error$OFFSET, on_error$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const char *, size_t, const void *);
     * } on_error
     * }
     */
    public static void on_error(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, on_error$OFFSET, on_error$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const char *, size_t, const void *);
     * }
     * }
     */
    public static class struct_unnamed_5 {

        struct_unnamed_5() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            libremidi_c_h.C_POINTER.withName("context"),
            libremidi_c_h.C_POINTER.withName("callback")
        ).withName("struct (unnamed at ./external/libremidi/include/libremidi/libremidi-c.h:161:3)");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final AddressLayout context$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("context"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * void *context
         * }
         */
        public static final AddressLayout context$layout() {
            return context$LAYOUT;
        }

        private static final long context$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * void *context
         * }
         */
        public static final long context$offset() {
            return context$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * void *context
         * }
         */
        public static MemorySegment context(MemorySegment struct) {
            return struct.get(context$LAYOUT, context$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * void *context
         * }
         */
        public static void context(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(context$LAYOUT, context$OFFSET, fieldValue);
        }

        /**
         * {@snippet lang=c :
         * void (*callback)(void *, const char *, size_t, const void *)
         * }
         */
        public static class callback {

            callback() {
                // Should not be called directly
            }

            /**
             * The function pointer signature, expressed as a functional interface
             */
            public interface Function {
                void apply(MemorySegment _x0, MemorySegment _x1, long _x2, MemorySegment _x3);
            }

            private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
                libremidi_c_h.C_POINTER,
                libremidi_c_h.C_POINTER,
                libremidi_c_h.C_LONG,
                libremidi_c_h.C_POINTER
            );

            /**
             * The descriptor of this function pointer
             */
            public static FunctionDescriptor descriptor() {
                return $DESC;
            }

            private static final MethodHandle UP$MH = libremidi_c_h.upcallHandle(callback.Function.class, "apply", $DESC);

            /**
             * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
             * The lifetime of the returned segment is managed by {@code arena}
             */
            public static MemorySegment allocate(callback.Function fi, Arena arena) {
                return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
            }

            private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

            /**
             * Invoke the upcall stub {@code funcPtr}, with given parameters
             */
            public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, long _x2, MemorySegment _x3) {
                try {
                     DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            }
        }

        private static final AddressLayout callback$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("callback"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * void (*callback)(void *, const char *, size_t, const void *)
         * }
         */
        public static final AddressLayout callback$layout() {
            return callback$LAYOUT;
        }

        private static final long callback$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * void (*callback)(void *, const char *, size_t, const void *)
         * }
         */
        public static final long callback$offset() {
            return callback$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * void (*callback)(void *, const char *, size_t, const void *)
         * }
         */
        public static MemorySegment callback(MemorySegment struct) {
            return struct.get(callback$LAYOUT, callback$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * void (*callback)(void *, const char *, size_t, const void *)
         * }
         */
        public static void callback(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(callback$LAYOUT, callback$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout on_warning$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("on_warning"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const char *, size_t, const void *);
     * } on_warning
     * }
     */
    public static final GroupLayout on_warning$layout() {
        return on_warning$LAYOUT;
    }

    private static final long on_warning$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const char *, size_t, const void *);
     * } on_warning
     * }
     */
    public static final long on_warning$offset() {
        return on_warning$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const char *, size_t, const void *);
     * } on_warning
     * }
     */
    public static MemorySegment on_warning(MemorySegment struct) {
        return struct.asSlice(on_warning$OFFSET, on_warning$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const char *, size_t, const void *);
     * } on_warning
     * }
     */
    public static void on_warning(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, on_warning$OFFSET, on_warning$LAYOUT.byteSize());
    }

    private static final AddressLayout port_name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("port_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *port_name
     * }
     */
    public static final AddressLayout port_name$layout() {
        return port_name$LAYOUT;
    }

    private static final long port_name$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *port_name
     * }
     */
    public static final long port_name$offset() {
        return port_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *port_name
     * }
     */
    public static MemorySegment port_name(MemorySegment struct) {
        return struct.get(port_name$LAYOUT, port_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *port_name
     * }
     */
    public static void port_name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(port_name$LAYOUT, port_name$OFFSET, fieldValue);
    }

    private static final OfBoolean virtual_port$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("virtual_port"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool virtual_port
     * }
     */
    public static final OfBoolean virtual_port$layout() {
        return virtual_port$LAYOUT;
    }

    private static final long virtual_port$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool virtual_port
     * }
     */
    public static final long virtual_port$offset() {
        return virtual_port$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool virtual_port
     * }
     */
    public static boolean virtual_port(MemorySegment struct) {
        return struct.get(virtual_port$LAYOUT, virtual_port$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool virtual_port
     * }
     */
    public static void virtual_port(MemorySegment struct, boolean fieldValue) {
        struct.set(virtual_port$LAYOUT, virtual_port$OFFSET, fieldValue);
    }

    private static final OfBoolean ignore_sysex$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("ignore_sysex"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool ignore_sysex
     * }
     */
    public static final OfBoolean ignore_sysex$layout() {
        return ignore_sysex$LAYOUT;
    }

    private static final long ignore_sysex$OFFSET = 89;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool ignore_sysex
     * }
     */
    public static final long ignore_sysex$offset() {
        return ignore_sysex$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool ignore_sysex
     * }
     */
    public static boolean ignore_sysex(MemorySegment struct) {
        return struct.get(ignore_sysex$LAYOUT, ignore_sysex$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool ignore_sysex
     * }
     */
    public static void ignore_sysex(MemorySegment struct, boolean fieldValue) {
        struct.set(ignore_sysex$LAYOUT, ignore_sysex$OFFSET, fieldValue);
    }

    private static final OfBoolean ignore_timing$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("ignore_timing"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool ignore_timing
     * }
     */
    public static final OfBoolean ignore_timing$layout() {
        return ignore_timing$LAYOUT;
    }

    private static final long ignore_timing$OFFSET = 90;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool ignore_timing
     * }
     */
    public static final long ignore_timing$offset() {
        return ignore_timing$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool ignore_timing
     * }
     */
    public static boolean ignore_timing(MemorySegment struct) {
        return struct.get(ignore_timing$LAYOUT, ignore_timing$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool ignore_timing
     * }
     */
    public static void ignore_timing(MemorySegment struct, boolean fieldValue) {
        struct.set(ignore_timing$LAYOUT, ignore_timing$OFFSET, fieldValue);
    }

    private static final OfBoolean ignore_sensing$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("ignore_sensing"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool ignore_sensing
     * }
     */
    public static final OfBoolean ignore_sensing$layout() {
        return ignore_sensing$LAYOUT;
    }

    private static final long ignore_sensing$OFFSET = 91;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool ignore_sensing
     * }
     */
    public static final long ignore_sensing$offset() {
        return ignore_sensing$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool ignore_sensing
     * }
     */
    public static boolean ignore_sensing(MemorySegment struct) {
        return struct.get(ignore_sensing$LAYOUT, ignore_sensing$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool ignore_sensing
     * }
     */
    public static void ignore_sensing(MemorySegment struct, boolean fieldValue) {
        struct.set(ignore_sensing$LAYOUT, ignore_sensing$OFFSET, fieldValue);
    }

    private static final OfInt timestamps$LAYOUT = (OfInt)$LAYOUT.select(groupElement("timestamps"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum libremidi_timestamp_mode timestamps
     * }
     */
    public static final OfInt timestamps$layout() {
        return timestamps$LAYOUT;
    }

    private static final long timestamps$OFFSET = 92;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum libremidi_timestamp_mode timestamps
     * }
     */
    public static final long timestamps$offset() {
        return timestamps$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum libremidi_timestamp_mode timestamps
     * }
     */
    public static int timestamps(MemorySegment struct) {
        return struct.get(timestamps$LAYOUT, timestamps$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum libremidi_timestamp_mode timestamps
     * }
     */
    public static void timestamps(MemorySegment struct, int fieldValue) {
        struct.set(timestamps$LAYOUT, timestamps$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

