// Generated by jextract

package dev.atsushieno.panama.libremidi;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct libremidi_observer_configuration {
 *     struct {
 *         void *context;
 *         void (*callback)(void *, const char *, size_t, const void *);
 *     } on_error;
 *     struct {
 *         void *context;
 *         void (*callback)(void *, const char *, size_t, const void *);
 *     } on_warning;
 *     struct {
 *         void *context;
 *         void (*callback)(void *, const libremidi_midi_in_port *);
 *     } input_added;
 *     struct {
 *         void *context;
 *         void (*callback)(void *, const libremidi_midi_in_port *);
 *     } input_removed;
 *     struct {
 *         void *context;
 *         void (*callback)(void *, const libremidi_midi_out_port *);
 *     } output_added;
 *     struct {
 *         void *context;
 *         void (*callback)(void *, const libremidi_midi_out_port *);
 *     } output_removed;
 *     bool track_hardware;
 *     bool track_virtual;
 *     bool track_any;
 *     bool notify_in_constructor;
 * }
 * }
 */
public class libremidi_observer_configuration {

    libremidi_observer_configuration() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        libremidi_observer_configuration.struct_unnamed_6.layout().withName("on_error"),
        libremidi_observer_configuration.struct_unnamed_7.layout().withName("on_warning"),
        libremidi_observer_configuration.struct_unnamed_8.layout().withName("input_added"),
        libremidi_observer_configuration.struct_unnamed_9.layout().withName("input_removed"),
        libremidi_observer_configuration.struct_unnamed_10.layout().withName("output_added"),
        libremidi_observer_configuration.struct_unnamed_11.layout().withName("output_removed"),
        libremidi_c_h.C_BOOL.withName("track_hardware"),
        libremidi_c_h.C_BOOL.withName("track_virtual"),
        libremidi_c_h.C_BOOL.withName("track_any"),
        libremidi_c_h.C_BOOL.withName("notify_in_constructor"),
        MemoryLayout.paddingLayout(4)
    ).withName("libremidi_observer_configuration");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const char *, size_t, const void *);
     * }
     * }
     */
    public static class struct_unnamed_6 {

        struct_unnamed_6() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            libremidi_c_h.C_POINTER.withName("context"),
            libremidi_c_h.C_POINTER.withName("callback")
        ).withName("struct (unnamed at ./external/libremidi/include/libremidi/libremidi-c.h:84:3)");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final AddressLayout context$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("context"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * void *context
         * }
         */
        public static final AddressLayout context$layout() {
            return context$LAYOUT;
        }

        private static final long context$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * void *context
         * }
         */
        public static final long context$offset() {
            return context$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * void *context
         * }
         */
        public static MemorySegment context(MemorySegment struct) {
            return struct.get(context$LAYOUT, context$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * void *context
         * }
         */
        public static void context(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(context$LAYOUT, context$OFFSET, fieldValue);
        }

        /**
         * {@snippet lang=c :
         * void (*callback)(void *, const char *, size_t, const void *)
         * }
         */
        public static class callback {

            callback() {
                // Should not be called directly
            }

            /**
             * The function pointer signature, expressed as a functional interface
             */
            public interface Function {
                void apply(MemorySegment _x0, MemorySegment _x1, long _x2, MemorySegment _x3);
            }

            private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
                libremidi_c_h.C_POINTER,
                libremidi_c_h.C_POINTER,
                libremidi_c_h.C_LONG,
                libremidi_c_h.C_POINTER
            );

            /**
             * The descriptor of this function pointer
             */
            public static FunctionDescriptor descriptor() {
                return $DESC;
            }

            private static final MethodHandle UP$MH = libremidi_c_h.upcallHandle(callback.Function.class, "apply", $DESC);

            /**
             * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
             * The lifetime of the returned segment is managed by {@code arena}
             */
            public static MemorySegment allocate(callback.Function fi, Arena arena) {
                return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
            }

            private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

            /**
             * Invoke the upcall stub {@code funcPtr}, with given parameters
             */
            public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, long _x2, MemorySegment _x3) {
                try {
                     DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            }
        }

        private static final AddressLayout callback$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("callback"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * void (*callback)(void *, const char *, size_t, const void *)
         * }
         */
        public static final AddressLayout callback$layout() {
            return callback$LAYOUT;
        }

        private static final long callback$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * void (*callback)(void *, const char *, size_t, const void *)
         * }
         */
        public static final long callback$offset() {
            return callback$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * void (*callback)(void *, const char *, size_t, const void *)
         * }
         */
        public static MemorySegment callback(MemorySegment struct) {
            return struct.get(callback$LAYOUT, callback$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * void (*callback)(void *, const char *, size_t, const void *)
         * }
         */
        public static void callback(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(callback$LAYOUT, callback$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout on_error$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("on_error"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const char *, size_t, const void *);
     * } on_error
     * }
     */
    public static final GroupLayout on_error$layout() {
        return on_error$LAYOUT;
    }

    private static final long on_error$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const char *, size_t, const void *);
     * } on_error
     * }
     */
    public static final long on_error$offset() {
        return on_error$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const char *, size_t, const void *);
     * } on_error
     * }
     */
    public static MemorySegment on_error(MemorySegment struct) {
        return struct.asSlice(on_error$OFFSET, on_error$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const char *, size_t, const void *);
     * } on_error
     * }
     */
    public static void on_error(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, on_error$OFFSET, on_error$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const char *, size_t, const void *);
     * }
     * }
     */
    public static class struct_unnamed_7 {

        struct_unnamed_7() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            libremidi_c_h.C_POINTER.withName("context"),
            libremidi_c_h.C_POINTER.withName("callback")
        ).withName("struct (unnamed at ./external/libremidi/include/libremidi/libremidi-c.h:89:3)");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final AddressLayout context$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("context"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * void *context
         * }
         */
        public static final AddressLayout context$layout() {
            return context$LAYOUT;
        }

        private static final long context$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * void *context
         * }
         */
        public static final long context$offset() {
            return context$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * void *context
         * }
         */
        public static MemorySegment context(MemorySegment struct) {
            return struct.get(context$LAYOUT, context$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * void *context
         * }
         */
        public static void context(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(context$LAYOUT, context$OFFSET, fieldValue);
        }

        /**
         * {@snippet lang=c :
         * void (*callback)(void *, const char *, size_t, const void *)
         * }
         */
        public static class callback {

            callback() {
                // Should not be called directly
            }

            /**
             * The function pointer signature, expressed as a functional interface
             */
            public interface Function {
                void apply(MemorySegment _x0, MemorySegment _x1, long _x2, MemorySegment _x3);
            }

            private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
                libremidi_c_h.C_POINTER,
                libremidi_c_h.C_POINTER,
                libremidi_c_h.C_LONG,
                libremidi_c_h.C_POINTER
            );

            /**
             * The descriptor of this function pointer
             */
            public static FunctionDescriptor descriptor() {
                return $DESC;
            }

            private static final MethodHandle UP$MH = libremidi_c_h.upcallHandle(callback.Function.class, "apply", $DESC);

            /**
             * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
             * The lifetime of the returned segment is managed by {@code arena}
             */
            public static MemorySegment allocate(callback.Function fi, Arena arena) {
                return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
            }

            private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

            /**
             * Invoke the upcall stub {@code funcPtr}, with given parameters
             */
            public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, long _x2, MemorySegment _x3) {
                try {
                     DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            }
        }

        private static final AddressLayout callback$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("callback"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * void (*callback)(void *, const char *, size_t, const void *)
         * }
         */
        public static final AddressLayout callback$layout() {
            return callback$LAYOUT;
        }

        private static final long callback$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * void (*callback)(void *, const char *, size_t, const void *)
         * }
         */
        public static final long callback$offset() {
            return callback$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * void (*callback)(void *, const char *, size_t, const void *)
         * }
         */
        public static MemorySegment callback(MemorySegment struct) {
            return struct.get(callback$LAYOUT, callback$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * void (*callback)(void *, const char *, size_t, const void *)
         * }
         */
        public static void callback(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(callback$LAYOUT, callback$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout on_warning$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("on_warning"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const char *, size_t, const void *);
     * } on_warning
     * }
     */
    public static final GroupLayout on_warning$layout() {
        return on_warning$LAYOUT;
    }

    private static final long on_warning$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const char *, size_t, const void *);
     * } on_warning
     * }
     */
    public static final long on_warning$offset() {
        return on_warning$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const char *, size_t, const void *);
     * } on_warning
     * }
     */
    public static MemorySegment on_warning(MemorySegment struct) {
        return struct.asSlice(on_warning$OFFSET, on_warning$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const char *, size_t, const void *);
     * } on_warning
     * }
     */
    public static void on_warning(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, on_warning$OFFSET, on_warning$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const libremidi_midi_in_port *);
     * }
     * }
     */
    public static class struct_unnamed_8 {

        struct_unnamed_8() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            libremidi_c_h.C_POINTER.withName("context"),
            libremidi_c_h.C_POINTER.withName("callback")
        ).withName("struct (unnamed at ./external/libremidi/include/libremidi/libremidi-c.h:95:3)");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final AddressLayout context$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("context"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * void *context
         * }
         */
        public static final AddressLayout context$layout() {
            return context$LAYOUT;
        }

        private static final long context$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * void *context
         * }
         */
        public static final long context$offset() {
            return context$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * void *context
         * }
         */
        public static MemorySegment context(MemorySegment struct) {
            return struct.get(context$LAYOUT, context$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * void *context
         * }
         */
        public static void context(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(context$LAYOUT, context$OFFSET, fieldValue);
        }

        /**
         * {@snippet lang=c :
         * void (*callback)(void *, const libremidi_midi_in_port *)
         * }
         */
        public static class callback {

            callback() {
                // Should not be called directly
            }

            /**
             * The function pointer signature, expressed as a functional interface
             */
            public interface Function {
                void apply(MemorySegment _x0, MemorySegment _x1);
            }

            private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
                libremidi_c_h.C_POINTER,
                libremidi_c_h.C_POINTER
            );

            /**
             * The descriptor of this function pointer
             */
            public static FunctionDescriptor descriptor() {
                return $DESC;
            }

            private static final MethodHandle UP$MH = libremidi_c_h.upcallHandle(callback.Function.class, "apply", $DESC);

            /**
             * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
             * The lifetime of the returned segment is managed by {@code arena}
             */
            public static MemorySegment allocate(callback.Function fi, Arena arena) {
                return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
            }

            private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

            /**
             * Invoke the upcall stub {@code funcPtr}, with given parameters
             */
            public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
                try {
                     DOWN$MH.invokeExact(funcPtr, _x0, _x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            }
        }

        private static final AddressLayout callback$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("callback"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * void (*callback)(void *, const libremidi_midi_in_port *)
         * }
         */
        public static final AddressLayout callback$layout() {
            return callback$LAYOUT;
        }

        private static final long callback$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * void (*callback)(void *, const libremidi_midi_in_port *)
         * }
         */
        public static final long callback$offset() {
            return callback$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * void (*callback)(void *, const libremidi_midi_in_port *)
         * }
         */
        public static MemorySegment callback(MemorySegment struct) {
            return struct.get(callback$LAYOUT, callback$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * void (*callback)(void *, const libremidi_midi_in_port *)
         * }
         */
        public static void callback(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(callback$LAYOUT, callback$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout input_added$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("input_added"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const libremidi_midi_in_port *);
     * } input_added
     * }
     */
    public static final GroupLayout input_added$layout() {
        return input_added$LAYOUT;
    }

    private static final long input_added$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const libremidi_midi_in_port *);
     * } input_added
     * }
     */
    public static final long input_added$offset() {
        return input_added$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const libremidi_midi_in_port *);
     * } input_added
     * }
     */
    public static MemorySegment input_added(MemorySegment struct) {
        return struct.asSlice(input_added$OFFSET, input_added$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const libremidi_midi_in_port *);
     * } input_added
     * }
     */
    public static void input_added(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, input_added$OFFSET, input_added$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const libremidi_midi_in_port *);
     * }
     * }
     */
    public static class struct_unnamed_9 {

        struct_unnamed_9() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            libremidi_c_h.C_POINTER.withName("context"),
            libremidi_c_h.C_POINTER.withName("callback")
        ).withName("struct (unnamed at ./external/libremidi/include/libremidi/libremidi-c.h:100:3)");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final AddressLayout context$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("context"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * void *context
         * }
         */
        public static final AddressLayout context$layout() {
            return context$LAYOUT;
        }

        private static final long context$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * void *context
         * }
         */
        public static final long context$offset() {
            return context$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * void *context
         * }
         */
        public static MemorySegment context(MemorySegment struct) {
            return struct.get(context$LAYOUT, context$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * void *context
         * }
         */
        public static void context(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(context$LAYOUT, context$OFFSET, fieldValue);
        }

        /**
         * {@snippet lang=c :
         * void (*callback)(void *, const libremidi_midi_in_port *)
         * }
         */
        public static class callback {

            callback() {
                // Should not be called directly
            }

            /**
             * The function pointer signature, expressed as a functional interface
             */
            public interface Function {
                void apply(MemorySegment _x0, MemorySegment _x1);
            }

            private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
                libremidi_c_h.C_POINTER,
                libremidi_c_h.C_POINTER
            );

            /**
             * The descriptor of this function pointer
             */
            public static FunctionDescriptor descriptor() {
                return $DESC;
            }

            private static final MethodHandle UP$MH = libremidi_c_h.upcallHandle(callback.Function.class, "apply", $DESC);

            /**
             * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
             * The lifetime of the returned segment is managed by {@code arena}
             */
            public static MemorySegment allocate(callback.Function fi, Arena arena) {
                return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
            }

            private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

            /**
             * Invoke the upcall stub {@code funcPtr}, with given parameters
             */
            public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
                try {
                     DOWN$MH.invokeExact(funcPtr, _x0, _x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            }
        }

        private static final AddressLayout callback$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("callback"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * void (*callback)(void *, const libremidi_midi_in_port *)
         * }
         */
        public static final AddressLayout callback$layout() {
            return callback$LAYOUT;
        }

        private static final long callback$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * void (*callback)(void *, const libremidi_midi_in_port *)
         * }
         */
        public static final long callback$offset() {
            return callback$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * void (*callback)(void *, const libremidi_midi_in_port *)
         * }
         */
        public static MemorySegment callback(MemorySegment struct) {
            return struct.get(callback$LAYOUT, callback$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * void (*callback)(void *, const libremidi_midi_in_port *)
         * }
         */
        public static void callback(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(callback$LAYOUT, callback$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout input_removed$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("input_removed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const libremidi_midi_in_port *);
     * } input_removed
     * }
     */
    public static final GroupLayout input_removed$layout() {
        return input_removed$LAYOUT;
    }

    private static final long input_removed$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const libremidi_midi_in_port *);
     * } input_removed
     * }
     */
    public static final long input_removed$offset() {
        return input_removed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const libremidi_midi_in_port *);
     * } input_removed
     * }
     */
    public static MemorySegment input_removed(MemorySegment struct) {
        return struct.asSlice(input_removed$OFFSET, input_removed$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const libremidi_midi_in_port *);
     * } input_removed
     * }
     */
    public static void input_removed(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, input_removed$OFFSET, input_removed$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const libremidi_midi_out_port *);
     * }
     * }
     */
    public static class struct_unnamed_10 {

        struct_unnamed_10() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            libremidi_c_h.C_POINTER.withName("context"),
            libremidi_c_h.C_POINTER.withName("callback")
        ).withName("struct (unnamed at ./external/libremidi/include/libremidi/libremidi-c.h:105:3)");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final AddressLayout context$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("context"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * void *context
         * }
         */
        public static final AddressLayout context$layout() {
            return context$LAYOUT;
        }

        private static final long context$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * void *context
         * }
         */
        public static final long context$offset() {
            return context$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * void *context
         * }
         */
        public static MemorySegment context(MemorySegment struct) {
            return struct.get(context$LAYOUT, context$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * void *context
         * }
         */
        public static void context(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(context$LAYOUT, context$OFFSET, fieldValue);
        }

        /**
         * {@snippet lang=c :
         * void (*callback)(void *, const libremidi_midi_out_port *)
         * }
         */
        public static class callback {

            callback() {
                // Should not be called directly
            }

            /**
             * The function pointer signature, expressed as a functional interface
             */
            public interface Function {
                void apply(MemorySegment _x0, MemorySegment _x1);
            }

            private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
                libremidi_c_h.C_POINTER,
                libremidi_c_h.C_POINTER
            );

            /**
             * The descriptor of this function pointer
             */
            public static FunctionDescriptor descriptor() {
                return $DESC;
            }

            private static final MethodHandle UP$MH = libremidi_c_h.upcallHandle(callback.Function.class, "apply", $DESC);

            /**
             * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
             * The lifetime of the returned segment is managed by {@code arena}
             */
            public static MemorySegment allocate(callback.Function fi, Arena arena) {
                return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
            }

            private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

            /**
             * Invoke the upcall stub {@code funcPtr}, with given parameters
             */
            public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
                try {
                     DOWN$MH.invokeExact(funcPtr, _x0, _x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            }
        }

        private static final AddressLayout callback$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("callback"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * void (*callback)(void *, const libremidi_midi_out_port *)
         * }
         */
        public static final AddressLayout callback$layout() {
            return callback$LAYOUT;
        }

        private static final long callback$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * void (*callback)(void *, const libremidi_midi_out_port *)
         * }
         */
        public static final long callback$offset() {
            return callback$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * void (*callback)(void *, const libremidi_midi_out_port *)
         * }
         */
        public static MemorySegment callback(MemorySegment struct) {
            return struct.get(callback$LAYOUT, callback$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * void (*callback)(void *, const libremidi_midi_out_port *)
         * }
         */
        public static void callback(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(callback$LAYOUT, callback$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout output_added$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("output_added"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const libremidi_midi_out_port *);
     * } output_added
     * }
     */
    public static final GroupLayout output_added$layout() {
        return output_added$LAYOUT;
    }

    private static final long output_added$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const libremidi_midi_out_port *);
     * } output_added
     * }
     */
    public static final long output_added$offset() {
        return output_added$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const libremidi_midi_out_port *);
     * } output_added
     * }
     */
    public static MemorySegment output_added(MemorySegment struct) {
        return struct.asSlice(output_added$OFFSET, output_added$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const libremidi_midi_out_port *);
     * } output_added
     * }
     */
    public static void output_added(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, output_added$OFFSET, output_added$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const libremidi_midi_out_port *);
     * }
     * }
     */
    public static class struct_unnamed_11 {

        struct_unnamed_11() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            libremidi_c_h.C_POINTER.withName("context"),
            libremidi_c_h.C_POINTER.withName("callback")
        ).withName("struct (unnamed at ./external/libremidi/include/libremidi/libremidi-c.h:110:3)");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final AddressLayout context$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("context"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * void *context
         * }
         */
        public static final AddressLayout context$layout() {
            return context$LAYOUT;
        }

        private static final long context$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * void *context
         * }
         */
        public static final long context$offset() {
            return context$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * void *context
         * }
         */
        public static MemorySegment context(MemorySegment struct) {
            return struct.get(context$LAYOUT, context$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * void *context
         * }
         */
        public static void context(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(context$LAYOUT, context$OFFSET, fieldValue);
        }

        /**
         * {@snippet lang=c :
         * void (*callback)(void *, const libremidi_midi_out_port *)
         * }
         */
        public static class callback {

            callback() {
                // Should not be called directly
            }

            /**
             * The function pointer signature, expressed as a functional interface
             */
            public interface Function {
                void apply(MemorySegment _x0, MemorySegment _x1);
            }

            private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
                libremidi_c_h.C_POINTER,
                libremidi_c_h.C_POINTER
            );

            /**
             * The descriptor of this function pointer
             */
            public static FunctionDescriptor descriptor() {
                return $DESC;
            }

            private static final MethodHandle UP$MH = libremidi_c_h.upcallHandle(callback.Function.class, "apply", $DESC);

            /**
             * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
             * The lifetime of the returned segment is managed by {@code arena}
             */
            public static MemorySegment allocate(callback.Function fi, Arena arena) {
                return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
            }

            private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

            /**
             * Invoke the upcall stub {@code funcPtr}, with given parameters
             */
            public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
                try {
                     DOWN$MH.invokeExact(funcPtr, _x0, _x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            }
        }

        private static final AddressLayout callback$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("callback"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * void (*callback)(void *, const libremidi_midi_out_port *)
         * }
         */
        public static final AddressLayout callback$layout() {
            return callback$LAYOUT;
        }

        private static final long callback$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * void (*callback)(void *, const libremidi_midi_out_port *)
         * }
         */
        public static final long callback$offset() {
            return callback$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * void (*callback)(void *, const libremidi_midi_out_port *)
         * }
         */
        public static MemorySegment callback(MemorySegment struct) {
            return struct.get(callback$LAYOUT, callback$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * void (*callback)(void *, const libremidi_midi_out_port *)
         * }
         */
        public static void callback(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(callback$LAYOUT, callback$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout output_removed$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("output_removed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const libremidi_midi_out_port *);
     * } output_removed
     * }
     */
    public static final GroupLayout output_removed$layout() {
        return output_removed$LAYOUT;
    }

    private static final long output_removed$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const libremidi_midi_out_port *);
     * } output_removed
     * }
     */
    public static final long output_removed$offset() {
        return output_removed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const libremidi_midi_out_port *);
     * } output_removed
     * }
     */
    public static MemorySegment output_removed(MemorySegment struct) {
        return struct.asSlice(output_removed$OFFSET, output_removed$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     void *context;
     *     void (*callback)(void *, const libremidi_midi_out_port *);
     * } output_removed
     * }
     */
    public static void output_removed(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, output_removed$OFFSET, output_removed$LAYOUT.byteSize());
    }

    private static final OfBoolean track_hardware$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("track_hardware"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool track_hardware
     * }
     */
    public static final OfBoolean track_hardware$layout() {
        return track_hardware$LAYOUT;
    }

    private static final long track_hardware$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool track_hardware
     * }
     */
    public static final long track_hardware$offset() {
        return track_hardware$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool track_hardware
     * }
     */
    public static boolean track_hardware(MemorySegment struct) {
        return struct.get(track_hardware$LAYOUT, track_hardware$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool track_hardware
     * }
     */
    public static void track_hardware(MemorySegment struct, boolean fieldValue) {
        struct.set(track_hardware$LAYOUT, track_hardware$OFFSET, fieldValue);
    }

    private static final OfBoolean track_virtual$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("track_virtual"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool track_virtual
     * }
     */
    public static final OfBoolean track_virtual$layout() {
        return track_virtual$LAYOUT;
    }

    private static final long track_virtual$OFFSET = 97;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool track_virtual
     * }
     */
    public static final long track_virtual$offset() {
        return track_virtual$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool track_virtual
     * }
     */
    public static boolean track_virtual(MemorySegment struct) {
        return struct.get(track_virtual$LAYOUT, track_virtual$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool track_virtual
     * }
     */
    public static void track_virtual(MemorySegment struct, boolean fieldValue) {
        struct.set(track_virtual$LAYOUT, track_virtual$OFFSET, fieldValue);
    }

    private static final OfBoolean track_any$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("track_any"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool track_any
     * }
     */
    public static final OfBoolean track_any$layout() {
        return track_any$LAYOUT;
    }

    private static final long track_any$OFFSET = 98;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool track_any
     * }
     */
    public static final long track_any$offset() {
        return track_any$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool track_any
     * }
     */
    public static boolean track_any(MemorySegment struct) {
        return struct.get(track_any$LAYOUT, track_any$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool track_any
     * }
     */
    public static void track_any(MemorySegment struct, boolean fieldValue) {
        struct.set(track_any$LAYOUT, track_any$OFFSET, fieldValue);
    }

    private static final OfBoolean notify_in_constructor$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("notify_in_constructor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool notify_in_constructor
     * }
     */
    public static final OfBoolean notify_in_constructor$layout() {
        return notify_in_constructor$LAYOUT;
    }

    private static final long notify_in_constructor$OFFSET = 99;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool notify_in_constructor
     * }
     */
    public static final long notify_in_constructor$offset() {
        return notify_in_constructor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool notify_in_constructor
     * }
     */
    public static boolean notify_in_constructor(MemorySegment struct) {
        return struct.get(notify_in_constructor$LAYOUT, notify_in_constructor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool notify_in_constructor
     * }
     */
    public static void notify_in_constructor(MemorySegment struct, boolean fieldValue) {
        struct.set(notify_in_constructor$LAYOUT, notify_in_constructor$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

