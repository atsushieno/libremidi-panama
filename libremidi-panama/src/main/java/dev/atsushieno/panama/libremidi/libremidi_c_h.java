// Generated by jextract

package dev.atsushieno.panama.libremidi;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class libremidi_c_h {

    libremidi_c_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.loaderLookup()
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;
    private static final int __bool_true_false_are_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __bool_true_false_are_defined 1
     * }
     */
    public static int __bool_true_false_are_defined() {
        return __bool_true_false_are_defined;
    }
    private static final int true_ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define true 1
     * }
     */
    public static int true_() {
        return true_;
    }
    private static final int false_ = (int)0L;
    /**
     * {@snippet lang=c :
     * #define false 0
     * }
     */
    public static int false_() {
        return false_;
    }
    private static final int __WORDSIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __WORDSIZE 64
     * }
     */
    public static int __WORDSIZE() {
        return __WORDSIZE;
    }
    private static final int __has_safe_buffers = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __has_safe_buffers 1
     * }
     */
    public static int __has_safe_buffers() {
        return __has_safe_buffers;
    }
    private static final int __DARWIN_ONLY_64_BIT_INO_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_ONLY_64_BIT_INO_T 1
     * }
     */
    public static int __DARWIN_ONLY_64_BIT_INO_T() {
        return __DARWIN_ONLY_64_BIT_INO_T;
    }
    private static final int __DARWIN_ONLY_UNIX_CONFORMANCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_ONLY_UNIX_CONFORMANCE 1
     * }
     */
    public static int __DARWIN_ONLY_UNIX_CONFORMANCE() {
        return __DARWIN_ONLY_UNIX_CONFORMANCE;
    }
    private static final int __DARWIN_ONLY_VERS_1050 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_ONLY_VERS_1050 1
     * }
     */
    public static int __DARWIN_ONLY_VERS_1050() {
        return __DARWIN_ONLY_VERS_1050;
    }
    private static final int __DARWIN_UNIX03 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_UNIX03 1
     * }
     */
    public static int __DARWIN_UNIX03() {
        return __DARWIN_UNIX03;
    }
    private static final int __DARWIN_64_BIT_INO_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_64_BIT_INO_T 1
     * }
     */
    public static int __DARWIN_64_BIT_INO_T() {
        return __DARWIN_64_BIT_INO_T;
    }
    private static final int __DARWIN_VERS_1050 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_VERS_1050 1
     * }
     */
    public static int __DARWIN_VERS_1050() {
        return __DARWIN_VERS_1050;
    }
    private static final int __DARWIN_NON_CANCELABLE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_NON_CANCELABLE 0
     * }
     */
    public static int __DARWIN_NON_CANCELABLE() {
        return __DARWIN_NON_CANCELABLE;
    }
    private static final int __STDC_WANT_LIB_EXT1__ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STDC_WANT_LIB_EXT1__ 1
     * }
     */
    public static int __STDC_WANT_LIB_EXT1__() {
        return __STDC_WANT_LIB_EXT1__;
    }
    private static final int __DARWIN_NO_LONG_LONG = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_NO_LONG_LONG 0
     * }
     */
    public static int __DARWIN_NO_LONG_LONG() {
        return __DARWIN_NO_LONG_LONG;
    }
    private static final int _DARWIN_FEATURE_64_BIT_INODE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_64_BIT_INODE 1
     * }
     */
    public static int _DARWIN_FEATURE_64_BIT_INODE() {
        return _DARWIN_FEATURE_64_BIT_INODE;
    }
    private static final int _DARWIN_FEATURE_ONLY_64_BIT_INODE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_ONLY_64_BIT_INODE 1
     * }
     */
    public static int _DARWIN_FEATURE_ONLY_64_BIT_INODE() {
        return _DARWIN_FEATURE_ONLY_64_BIT_INODE;
    }
    private static final int _DARWIN_FEATURE_ONLY_VERS_1050 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_ONLY_VERS_1050 1
     * }
     */
    public static int _DARWIN_FEATURE_ONLY_VERS_1050() {
        return _DARWIN_FEATURE_ONLY_VERS_1050;
    }
    private static final int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE 1
     * }
     */
    public static int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE() {
        return _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE;
    }
    private static final int _DARWIN_FEATURE_UNIX_CONFORMANCE = (int)3L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_UNIX_CONFORMANCE 3
     * }
     */
    public static int _DARWIN_FEATURE_UNIX_CONFORMANCE() {
        return _DARWIN_FEATURE_UNIX_CONFORMANCE;
    }
    private static final int __has_ptrcheck = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __has_ptrcheck 0
     * }
     */
    public static int __has_ptrcheck() {
        return __has_ptrcheck;
    }
    private static final int __PTHREAD_SIZE__ = (int)8176L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_SIZE__ 8176
     * }
     */
    public static int __PTHREAD_SIZE__() {
        return __PTHREAD_SIZE__;
    }
    private static final int __PTHREAD_ATTR_SIZE__ = (int)56L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_ATTR_SIZE__ 56
     * }
     */
    public static int __PTHREAD_ATTR_SIZE__() {
        return __PTHREAD_ATTR_SIZE__;
    }
    private static final int __PTHREAD_MUTEXATTR_SIZE__ = (int)8L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_MUTEXATTR_SIZE__ 8
     * }
     */
    public static int __PTHREAD_MUTEXATTR_SIZE__() {
        return __PTHREAD_MUTEXATTR_SIZE__;
    }
    private static final int __PTHREAD_MUTEX_SIZE__ = (int)56L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_MUTEX_SIZE__ 56
     * }
     */
    public static int __PTHREAD_MUTEX_SIZE__() {
        return __PTHREAD_MUTEX_SIZE__;
    }
    private static final int __PTHREAD_CONDATTR_SIZE__ = (int)8L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_CONDATTR_SIZE__ 8
     * }
     */
    public static int __PTHREAD_CONDATTR_SIZE__() {
        return __PTHREAD_CONDATTR_SIZE__;
    }
    private static final int __PTHREAD_COND_SIZE__ = (int)40L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_COND_SIZE__ 40
     * }
     */
    public static int __PTHREAD_COND_SIZE__() {
        return __PTHREAD_COND_SIZE__;
    }
    private static final int __PTHREAD_ONCE_SIZE__ = (int)8L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_ONCE_SIZE__ 8
     * }
     */
    public static int __PTHREAD_ONCE_SIZE__() {
        return __PTHREAD_ONCE_SIZE__;
    }
    private static final int __PTHREAD_RWLOCK_SIZE__ = (int)192L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_RWLOCK_SIZE__ 192
     * }
     */
    public static int __PTHREAD_RWLOCK_SIZE__() {
        return __PTHREAD_RWLOCK_SIZE__;
    }
    private static final int __PTHREAD_RWLOCKATTR_SIZE__ = (int)16L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_RWLOCKATTR_SIZE__ 16
     * }
     */
    public static int __PTHREAD_RWLOCKATTR_SIZE__() {
        return __PTHREAD_RWLOCKATTR_SIZE__;
    }
    private static final int INT8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT8_MAX 127
     * }
     */
    public static int INT8_MAX() {
        return INT8_MAX;
    }
    private static final int INT16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT16_MAX 32767
     * }
     */
    public static int INT16_MAX() {
        return INT16_MAX;
    }
    private static final int INT32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT32_MAX 2147483647
     * }
     */
    public static int INT32_MAX() {
        return INT32_MAX;
    }
    private static final int UINT8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT8_MAX 255
     * }
     */
    public static int UINT8_MAX() {
        return UINT8_MAX;
    }
    private static final int UINT16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT16_MAX 65535
     * }
     */
    public static int UINT16_MAX() {
        return UINT16_MAX;
    }
    /**
     * {@snippet lang=c :
     * typedef long ptrdiff_t
     * }
     */
    public static final OfLong ptrdiff_t = libremidi_c_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long size_t
     * }
     */
    public static final OfLong size_t = libremidi_c_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int wchar_t
     * }
     */
    public static final OfInt wchar_t = libremidi_c_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef signed char int8_t
     * }
     */
    public static final OfByte int8_t = libremidi_c_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef short int16_t
     * }
     */
    public static final OfShort int16_t = libremidi_c_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int int32_t
     * }
     */
    public static final OfInt int32_t = libremidi_c_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long long int64_t
     * }
     */
    public static final OfLong int64_t = libremidi_c_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned char uint8_t
     * }
     */
    public static final OfByte uint8_t = libremidi_c_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned short uint16_t
     * }
     */
    public static final OfShort uint16_t = libremidi_c_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int uint32_t
     * }
     */
    public static final OfInt uint32_t = libremidi_c_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long uint64_t
     * }
     */
    public static final OfLong uint64_t = libremidi_c_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int8_t int_least8_t
     * }
     */
    public static final OfByte int_least8_t = libremidi_c_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef int16_t int_least16_t
     * }
     */
    public static final OfShort int_least16_t = libremidi_c_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int32_t int_least32_t
     * }
     */
    public static final OfInt int_least32_t = libremidi_c_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int64_t int_least64_t
     * }
     */
    public static final OfLong int_least64_t = libremidi_c_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef uint8_t uint_least8_t
     * }
     */
    public static final OfByte uint_least8_t = libremidi_c_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef uint16_t uint_least16_t
     * }
     */
    public static final OfShort uint_least16_t = libremidi_c_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef uint32_t uint_least32_t
     * }
     */
    public static final OfInt uint_least32_t = libremidi_c_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef uint64_t uint_least64_t
     * }
     */
    public static final OfLong uint_least64_t = libremidi_c_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int8_t int_fast8_t
     * }
     */
    public static final OfByte int_fast8_t = libremidi_c_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef int16_t int_fast16_t
     * }
     */
    public static final OfShort int_fast16_t = libremidi_c_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int32_t int_fast32_t
     * }
     */
    public static final OfInt int_fast32_t = libremidi_c_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int64_t int_fast64_t
     * }
     */
    public static final OfLong int_fast64_t = libremidi_c_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef uint8_t uint_fast8_t
     * }
     */
    public static final OfByte uint_fast8_t = libremidi_c_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef uint16_t uint_fast16_t
     * }
     */
    public static final OfShort uint_fast16_t = libremidi_c_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef uint32_t uint_fast32_t
     * }
     */
    public static final OfInt uint_fast32_t = libremidi_c_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef uint64_t uint_fast64_t
     * }
     */
    public static final OfLong uint_fast64_t = libremidi_c_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef signed char __int8_t
     * }
     */
    public static final OfByte __int8_t = libremidi_c_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned char __uint8_t
     * }
     */
    public static final OfByte __uint8_t = libremidi_c_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef short __int16_t
     * }
     */
    public static final OfShort __int16_t = libremidi_c_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __uint16_t
     * }
     */
    public static final OfShort __uint16_t = libremidi_c_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int __int32_t
     * }
     */
    public static final OfInt __int32_t = libremidi_c_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __uint32_t
     * }
     */
    public static final OfInt __uint32_t = libremidi_c_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long long __int64_t
     * }
     */
    public static final OfLong __int64_t = libremidi_c_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long __uint64_t
     * }
     */
    public static final OfLong __uint64_t = libremidi_c_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_intptr_t
     * }
     */
    public static final OfLong __darwin_intptr_t = libremidi_c_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __darwin_natural_t
     * }
     */
    public static final OfInt __darwin_natural_t = libremidi_c_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_ct_rune_t
     * }
     */
    public static final OfInt __darwin_ct_rune_t = libremidi_c_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_ptrdiff_t
     * }
     */
    public static final OfLong __darwin_ptrdiff_t = libremidi_c_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __darwin_size_t
     * }
     */
    public static final OfLong __darwin_size_t = libremidi_c_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __builtin_va_list __darwin_va_list
     * }
     */
    public static final AddressLayout __darwin_va_list = libremidi_c_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_wchar_t
     * }
     */
    public static final OfInt __darwin_wchar_t = libremidi_c_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __darwin_wchar_t __darwin_rune_t
     * }
     */
    public static final OfInt __darwin_rune_t = libremidi_c_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_wint_t
     * }
     */
    public static final OfInt __darwin_wint_t = libremidi_c_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __darwin_clock_t
     * }
     */
    public static final OfLong __darwin_clock_t = libremidi_c_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_socklen_t
     * }
     */
    public static final OfInt __darwin_socklen_t = libremidi_c_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_ssize_t
     * }
     */
    public static final OfLong __darwin_ssize_t = libremidi_c_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_time_t
     * }
     */
    public static final OfLong __darwin_time_t = libremidi_c_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int64_t __darwin_blkcnt_t
     * }
     */
    public static final OfLong __darwin_blkcnt_t = libremidi_c_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __darwin_blksize_t
     * }
     */
    public static final OfInt __darwin_blksize_t = libremidi_c_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __darwin_dev_t
     * }
     */
    public static final OfInt __darwin_dev_t = libremidi_c_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __darwin_fsblkcnt_t
     * }
     */
    public static final OfInt __darwin_fsblkcnt_t = libremidi_c_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __darwin_fsfilcnt_t
     * }
     */
    public static final OfInt __darwin_fsfilcnt_t = libremidi_c_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_gid_t
     * }
     */
    public static final OfInt __darwin_gid_t = libremidi_c_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_id_t
     * }
     */
    public static final OfInt __darwin_id_t = libremidi_c_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint64_t __darwin_ino64_t
     * }
     */
    public static final OfLong __darwin_ino64_t = libremidi_c_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __darwin_ino64_t __darwin_ino_t
     * }
     */
    public static final OfLong __darwin_ino_t = libremidi_c_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __darwin_natural_t __darwin_mach_port_name_t
     * }
     */
    public static final OfInt __darwin_mach_port_name_t = libremidi_c_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __darwin_mach_port_name_t __darwin_mach_port_t
     * }
     */
    public static final OfInt __darwin_mach_port_t = libremidi_c_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint16_t __darwin_mode_t
     * }
     */
    public static final OfShort __darwin_mode_t = libremidi_c_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int64_t __darwin_off_t
     * }
     */
    public static final OfLong __darwin_off_t = libremidi_c_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __darwin_pid_t
     * }
     */
    public static final OfInt __darwin_pid_t = libremidi_c_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_sigset_t
     * }
     */
    public static final OfInt __darwin_sigset_t = libremidi_c_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __darwin_suseconds_t
     * }
     */
    public static final OfInt __darwin_suseconds_t = libremidi_c_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_uid_t
     * }
     */
    public static final OfInt __darwin_uid_t = libremidi_c_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_useconds_t
     * }
     */
    public static final OfInt __darwin_useconds_t = libremidi_c_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __darwin_pthread_key_t
     * }
     */
    public static final OfLong __darwin_pthread_key_t = libremidi_c_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef struct _opaque_pthread_t {
     *     long __sig;
     *     struct __darwin_pthread_handler_rec *__cleanup_stack;
     *     char __opaque[8176];
     * } *__darwin_pthread_t
     * }
     */
    public static final AddressLayout __darwin_pthread_t = libremidi_c_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef unsigned char u_int8_t
     * }
     */
    public static final OfByte u_int8_t = libremidi_c_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned short u_int16_t
     * }
     */
    public static final OfShort u_int16_t = libremidi_c_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int u_int32_t
     * }
     */
    public static final OfInt u_int32_t = libremidi_c_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long u_int64_t
     * }
     */
    public static final OfLong u_int64_t = libremidi_c_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int64_t register_t
     * }
     */
    public static final OfLong register_t = libremidi_c_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uintptr_t
     * }
     */
    public static final OfLong uintptr_t = libremidi_c_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef u_int64_t user_addr_t
     * }
     */
    public static final OfLong user_addr_t = libremidi_c_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef u_int64_t user_size_t
     * }
     */
    public static final OfLong user_size_t = libremidi_c_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int64_t user_ssize_t
     * }
     */
    public static final OfLong user_ssize_t = libremidi_c_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int64_t user_long_t
     * }
     */
    public static final OfLong user_long_t = libremidi_c_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef u_int64_t user_ulong_t
     * }
     */
    public static final OfLong user_ulong_t = libremidi_c_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int64_t user_time_t
     * }
     */
    public static final OfLong user_time_t = libremidi_c_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int64_t user_off_t
     * }
     */
    public static final OfLong user_off_t = libremidi_c_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef u_int64_t syscall_arg_t
     * }
     */
    public static final OfLong syscall_arg_t = libremidi_c_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __darwin_intptr_t intptr_t
     * }
     */
    public static final OfLong intptr_t = libremidi_c_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long intmax_t
     * }
     */
    public static final OfLong intmax_t = libremidi_c_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uintmax_t
     * }
     */
    public static final OfLong uintmax_t = libremidi_c_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned char midi1_symbol
     * }
     */
    public static final OfByte midi1_symbol = libremidi_c_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned char *midi1_message
     * }
     */
    public static final AddressLayout midi1_message = libremidi_c_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef uint32_t midi2_symbol
     * }
     */
    public static final OfInt midi2_symbol = libremidi_c_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef midi2_symbol *midi2_message
     * }
     */
    public static final AddressLayout midi2_message = libremidi_c_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef int64_t libremidi_timestamp
     * }
     */
    public static final OfLong libremidi_timestamp = libremidi_c_h.C_LONG_LONG;
    private static final int NoTimestamp = (int)0L;
    /**
     * {@snippet lang=c :
     * enum libremidi_timestamp_mode.NoTimestamp = 0
     * }
     */
    public static int NoTimestamp() {
        return NoTimestamp;
    }
    private static final int Relative = (int)1L;
    /**
     * {@snippet lang=c :
     * enum libremidi_timestamp_mode.Relative = 1
     * }
     */
    public static int Relative() {
        return Relative;
    }
    private static final int Absolute = (int)2L;
    /**
     * {@snippet lang=c :
     * enum libremidi_timestamp_mode.Absolute = 2
     * }
     */
    public static int Absolute() {
        return Absolute;
    }
    private static final int SystemMonotonic = (int)3L;
    /**
     * {@snippet lang=c :
     * enum libremidi_timestamp_mode.SystemMonotonic = 3
     * }
     */
    public static int SystemMonotonic() {
        return SystemMonotonic;
    }
    private static final int AudioFrame = (int)4L;
    /**
     * {@snippet lang=c :
     * enum libremidi_timestamp_mode.AudioFrame = 4
     * }
     */
    public static int AudioFrame() {
        return AudioFrame;
    }
    private static final int Custom = (int)5L;
    /**
     * {@snippet lang=c :
     * enum libremidi_timestamp_mode.Custom = 5
     * }
     */
    public static int Custom() {
        return Custom;
    }
    private static final int UNSPECIFIED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum libremidi_api.UNSPECIFIED = 0
     * }
     */
    public static int UNSPECIFIED() {
        return UNSPECIFIED;
    }
    private static final int COREMIDI = (int)1L;
    /**
     * {@snippet lang=c :
     * enum libremidi_api.COREMIDI = 1
     * }
     */
    public static int COREMIDI() {
        return COREMIDI;
    }
    private static final int ALSA_SEQ = (int)2L;
    /**
     * {@snippet lang=c :
     * enum libremidi_api.ALSA_SEQ = 2
     * }
     */
    public static int ALSA_SEQ() {
        return ALSA_SEQ;
    }
    private static final int ALSA_RAW = (int)3L;
    /**
     * {@snippet lang=c :
     * enum libremidi_api.ALSA_RAW = 3
     * }
     */
    public static int ALSA_RAW() {
        return ALSA_RAW;
    }
    private static final int JACK_MIDI = (int)4L;
    /**
     * {@snippet lang=c :
     * enum libremidi_api.JACK_MIDI = 4
     * }
     */
    public static int JACK_MIDI() {
        return JACK_MIDI;
    }
    private static final int WINDOWS_MM = (int)5L;
    /**
     * {@snippet lang=c :
     * enum libremidi_api.WINDOWS_MM = 5
     * }
     */
    public static int WINDOWS_MM() {
        return WINDOWS_MM;
    }
    private static final int WINDOWS_UWP = (int)6L;
    /**
     * {@snippet lang=c :
     * enum libremidi_api.WINDOWS_UWP = 6
     * }
     */
    public static int WINDOWS_UWP() {
        return WINDOWS_UWP;
    }
    private static final int WEBMIDI = (int)7L;
    /**
     * {@snippet lang=c :
     * enum libremidi_api.WEBMIDI = 7
     * }
     */
    public static int WEBMIDI() {
        return WEBMIDI;
    }
    private static final int PIPEWIRE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum libremidi_api.PIPEWIRE = 8
     * }
     */
    public static int PIPEWIRE() {
        return PIPEWIRE;
    }
    private static final int ALSA_RAW_UMP = (int)9L;
    /**
     * {@snippet lang=c :
     * enum libremidi_api.ALSA_RAW_UMP = 9
     * }
     */
    public static int ALSA_RAW_UMP() {
        return ALSA_RAW_UMP;
    }
    private static final int ALSA_SEQ_UMP = (int)10L;
    /**
     * {@snippet lang=c :
     * enum libremidi_api.ALSA_SEQ_UMP = 10
     * }
     */
    public static int ALSA_SEQ_UMP() {
        return ALSA_SEQ_UMP;
    }
    private static final int COREMIDI_UMP = (int)11L;
    /**
     * {@snippet lang=c :
     * enum libremidi_api.COREMIDI_UMP = 11
     * }
     */
    public static int COREMIDI_UMP() {
        return COREMIDI_UMP;
    }
    private static final int WINDOWS_MIDI_SERVICES = (int)12L;
    /**
     * {@snippet lang=c :
     * enum libremidi_api.WINDOWS_MIDI_SERVICES = 12
     * }
     */
    public static int WINDOWS_MIDI_SERVICES() {
        return WINDOWS_MIDI_SERVICES;
    }
    private static final int DUMMY = (int)13L;
    /**
     * {@snippet lang=c :
     * enum libremidi_api.DUMMY = 13
     * }
     */
    public static int DUMMY() {
        return DUMMY;
    }
    private static final int Observer = (int)0L;
    /**
     * {@snippet lang=c :
     * enum enum (unnamed at ./external/libremidi/include/libremidi/libremidi-c.h:72:3).Observer = 0
     * }
     */
    public static int Observer() {
        return Observer;
    }
    private static final int Input = (int)1L;
    /**
     * {@snippet lang=c :
     * enum enum (unnamed at ./external/libremidi/include/libremidi/libremidi-c.h:72:3).Input = 1
     * }
     */
    public static int Input() {
        return Input;
    }
    private static final int Output = (int)2L;
    /**
     * {@snippet lang=c :
     * enum enum (unnamed at ./external/libremidi/include/libremidi/libremidi-c.h:72:3).Output = 2
     * }
     */
    public static int Output() {
        return Output;
    }
    private static final int MIDI1 = (int)0L;
    /**
     * {@snippet lang=c :
     * enum enum (unnamed at ./external/libremidi/include/libremidi/libremidi-c.h:124:3).MIDI1 = 0
     * }
     */
    public static int MIDI1() {
        return MIDI1;
    }
    private static final int MIDI2 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum enum (unnamed at ./external/libremidi/include/libremidi/libremidi-c.h:124:3).MIDI2 = 1
     * }
     */
    public static int MIDI2() {
        return MIDI2;
    }

    private static class libremidi_midi_api_configuration_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            libremidi_c_h.C_INT,
            libremidi_c_h.C_POINTER
        );

        public static final MemorySegment ADDR = libremidi_c_h.findOrThrow("libremidi_midi_api_configuration_init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int libremidi_midi_api_configuration_init(libremidi_api_configuration *)
     * }
     */
    public static FunctionDescriptor libremidi_midi_api_configuration_init$descriptor() {
        return libremidi_midi_api_configuration_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int libremidi_midi_api_configuration_init(libremidi_api_configuration *)
     * }
     */
    public static MethodHandle libremidi_midi_api_configuration_init$handle() {
        return libremidi_midi_api_configuration_init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int libremidi_midi_api_configuration_init(libremidi_api_configuration *)
     * }
     */
    public static MemorySegment libremidi_midi_api_configuration_init$address() {
        return libremidi_midi_api_configuration_init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int libremidi_midi_api_configuration_init(libremidi_api_configuration *)
     * }
     */
    public static int libremidi_midi_api_configuration_init(MemorySegment x0) {
        var mh$ = libremidi_midi_api_configuration_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("libremidi_midi_api_configuration_init", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class libremidi_midi_observer_configuration_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            libremidi_c_h.C_INT,
            libremidi_c_h.C_POINTER
        );

        public static final MemorySegment ADDR = libremidi_c_h.findOrThrow("libremidi_midi_observer_configuration_init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int libremidi_midi_observer_configuration_init(libremidi_observer_configuration *)
     * }
     */
    public static FunctionDescriptor libremidi_midi_observer_configuration_init$descriptor() {
        return libremidi_midi_observer_configuration_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int libremidi_midi_observer_configuration_init(libremidi_observer_configuration *)
     * }
     */
    public static MethodHandle libremidi_midi_observer_configuration_init$handle() {
        return libremidi_midi_observer_configuration_init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int libremidi_midi_observer_configuration_init(libremidi_observer_configuration *)
     * }
     */
    public static MemorySegment libremidi_midi_observer_configuration_init$address() {
        return libremidi_midi_observer_configuration_init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int libremidi_midi_observer_configuration_init(libremidi_observer_configuration *)
     * }
     */
    public static int libremidi_midi_observer_configuration_init(MemorySegment x0) {
        var mh$ = libremidi_midi_observer_configuration_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("libremidi_midi_observer_configuration_init", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class libremidi_midi_configuration_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            libremidi_c_h.C_INT,
            libremidi_c_h.C_POINTER
        );

        public static final MemorySegment ADDR = libremidi_c_h.findOrThrow("libremidi_midi_configuration_init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int libremidi_midi_configuration_init(libremidi_midi_configuration *)
     * }
     */
    public static FunctionDescriptor libremidi_midi_configuration_init$descriptor() {
        return libremidi_midi_configuration_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int libremidi_midi_configuration_init(libremidi_midi_configuration *)
     * }
     */
    public static MethodHandle libremidi_midi_configuration_init$handle() {
        return libremidi_midi_configuration_init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int libremidi_midi_configuration_init(libremidi_midi_configuration *)
     * }
     */
    public static MemorySegment libremidi_midi_configuration_init$address() {
        return libremidi_midi_configuration_init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int libremidi_midi_configuration_init(libremidi_midi_configuration *)
     * }
     */
    public static int libremidi_midi_configuration_init(MemorySegment x0) {
        var mh$ = libremidi_midi_configuration_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("libremidi_midi_configuration_init", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class libremidi_midi_in_port_clone {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            libremidi_c_h.C_INT,
            libremidi_c_h.C_POINTER,
            libremidi_c_h.C_POINTER
        );

        public static final MemorySegment ADDR = libremidi_c_h.findOrThrow("libremidi_midi_in_port_clone");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int libremidi_midi_in_port_clone(const libremidi_midi_in_port *port, libremidi_midi_in_port **dst)
     * }
     */
    public static FunctionDescriptor libremidi_midi_in_port_clone$descriptor() {
        return libremidi_midi_in_port_clone.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int libremidi_midi_in_port_clone(const libremidi_midi_in_port *port, libremidi_midi_in_port **dst)
     * }
     */
    public static MethodHandle libremidi_midi_in_port_clone$handle() {
        return libremidi_midi_in_port_clone.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int libremidi_midi_in_port_clone(const libremidi_midi_in_port *port, libremidi_midi_in_port **dst)
     * }
     */
    public static MemorySegment libremidi_midi_in_port_clone$address() {
        return libremidi_midi_in_port_clone.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int libremidi_midi_in_port_clone(const libremidi_midi_in_port *port, libremidi_midi_in_port **dst)
     * }
     */
    public static int libremidi_midi_in_port_clone(MemorySegment port, MemorySegment dst) {
        var mh$ = libremidi_midi_in_port_clone.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("libremidi_midi_in_port_clone", port, dst);
            }
            return (int)mh$.invokeExact(port, dst);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class libremidi_midi_in_port_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            libremidi_c_h.C_INT,
            libremidi_c_h.C_POINTER
        );

        public static final MemorySegment ADDR = libremidi_c_h.findOrThrow("libremidi_midi_in_port_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int libremidi_midi_in_port_free(libremidi_midi_in_port *port)
     * }
     */
    public static FunctionDescriptor libremidi_midi_in_port_free$descriptor() {
        return libremidi_midi_in_port_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int libremidi_midi_in_port_free(libremidi_midi_in_port *port)
     * }
     */
    public static MethodHandle libremidi_midi_in_port_free$handle() {
        return libremidi_midi_in_port_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int libremidi_midi_in_port_free(libremidi_midi_in_port *port)
     * }
     */
    public static MemorySegment libremidi_midi_in_port_free$address() {
        return libremidi_midi_in_port_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int libremidi_midi_in_port_free(libremidi_midi_in_port *port)
     * }
     */
    public static int libremidi_midi_in_port_free(MemorySegment port) {
        var mh$ = libremidi_midi_in_port_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("libremidi_midi_in_port_free", port);
            }
            return (int)mh$.invokeExact(port);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class libremidi_midi_in_port_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            libremidi_c_h.C_INT,
            libremidi_c_h.C_POINTER,
            libremidi_c_h.C_POINTER,
            libremidi_c_h.C_POINTER
        );

        public static final MemorySegment ADDR = libremidi_c_h.findOrThrow("libremidi_midi_in_port_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int libremidi_midi_in_port_name(const libremidi_midi_in_port *port, const char **name, size_t *len)
     * }
     */
    public static FunctionDescriptor libremidi_midi_in_port_name$descriptor() {
        return libremidi_midi_in_port_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int libremidi_midi_in_port_name(const libremidi_midi_in_port *port, const char **name, size_t *len)
     * }
     */
    public static MethodHandle libremidi_midi_in_port_name$handle() {
        return libremidi_midi_in_port_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int libremidi_midi_in_port_name(const libremidi_midi_in_port *port, const char **name, size_t *len)
     * }
     */
    public static MemorySegment libremidi_midi_in_port_name$address() {
        return libremidi_midi_in_port_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int libremidi_midi_in_port_name(const libremidi_midi_in_port *port, const char **name, size_t *len)
     * }
     */
    public static int libremidi_midi_in_port_name(MemorySegment port, MemorySegment name, MemorySegment len) {
        var mh$ = libremidi_midi_in_port_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("libremidi_midi_in_port_name", port, name, len);
            }
            return (int)mh$.invokeExact(port, name, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class libremidi_midi_out_port_clone {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            libremidi_c_h.C_INT,
            libremidi_c_h.C_POINTER,
            libremidi_c_h.C_POINTER
        );

        public static final MemorySegment ADDR = libremidi_c_h.findOrThrow("libremidi_midi_out_port_clone");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int libremidi_midi_out_port_clone(const libremidi_midi_out_port *port, libremidi_midi_out_port **dst)
     * }
     */
    public static FunctionDescriptor libremidi_midi_out_port_clone$descriptor() {
        return libremidi_midi_out_port_clone.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int libremidi_midi_out_port_clone(const libremidi_midi_out_port *port, libremidi_midi_out_port **dst)
     * }
     */
    public static MethodHandle libremidi_midi_out_port_clone$handle() {
        return libremidi_midi_out_port_clone.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int libremidi_midi_out_port_clone(const libremidi_midi_out_port *port, libremidi_midi_out_port **dst)
     * }
     */
    public static MemorySegment libremidi_midi_out_port_clone$address() {
        return libremidi_midi_out_port_clone.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int libremidi_midi_out_port_clone(const libremidi_midi_out_port *port, libremidi_midi_out_port **dst)
     * }
     */
    public static int libremidi_midi_out_port_clone(MemorySegment port, MemorySegment dst) {
        var mh$ = libremidi_midi_out_port_clone.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("libremidi_midi_out_port_clone", port, dst);
            }
            return (int)mh$.invokeExact(port, dst);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class libremidi_midi_out_port_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            libremidi_c_h.C_INT,
            libremidi_c_h.C_POINTER
        );

        public static final MemorySegment ADDR = libremidi_c_h.findOrThrow("libremidi_midi_out_port_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int libremidi_midi_out_port_free(libremidi_midi_out_port *port)
     * }
     */
    public static FunctionDescriptor libremidi_midi_out_port_free$descriptor() {
        return libremidi_midi_out_port_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int libremidi_midi_out_port_free(libremidi_midi_out_port *port)
     * }
     */
    public static MethodHandle libremidi_midi_out_port_free$handle() {
        return libremidi_midi_out_port_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int libremidi_midi_out_port_free(libremidi_midi_out_port *port)
     * }
     */
    public static MemorySegment libremidi_midi_out_port_free$address() {
        return libremidi_midi_out_port_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int libremidi_midi_out_port_free(libremidi_midi_out_port *port)
     * }
     */
    public static int libremidi_midi_out_port_free(MemorySegment port) {
        var mh$ = libremidi_midi_out_port_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("libremidi_midi_out_port_free", port);
            }
            return (int)mh$.invokeExact(port);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class libremidi_midi_out_port_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            libremidi_c_h.C_INT,
            libremidi_c_h.C_POINTER,
            libremidi_c_h.C_POINTER,
            libremidi_c_h.C_POINTER
        );

        public static final MemorySegment ADDR = libremidi_c_h.findOrThrow("libremidi_midi_out_port_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int libremidi_midi_out_port_name(const libremidi_midi_out_port *port, const char **name, size_t *len)
     * }
     */
    public static FunctionDescriptor libremidi_midi_out_port_name$descriptor() {
        return libremidi_midi_out_port_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int libremidi_midi_out_port_name(const libremidi_midi_out_port *port, const char **name, size_t *len)
     * }
     */
    public static MethodHandle libremidi_midi_out_port_name$handle() {
        return libremidi_midi_out_port_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int libremidi_midi_out_port_name(const libremidi_midi_out_port *port, const char **name, size_t *len)
     * }
     */
    public static MemorySegment libremidi_midi_out_port_name$address() {
        return libremidi_midi_out_port_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int libremidi_midi_out_port_name(const libremidi_midi_out_port *port, const char **name, size_t *len)
     * }
     */
    public static int libremidi_midi_out_port_name(MemorySegment port, MemorySegment name, MemorySegment len) {
        var mh$ = libremidi_midi_out_port_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("libremidi_midi_out_port_name", port, name, len);
            }
            return (int)mh$.invokeExact(port, name, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class libremidi_midi_observer_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            libremidi_c_h.C_INT,
            libremidi_c_h.C_POINTER,
            libremidi_c_h.C_POINTER,
            libremidi_c_h.C_POINTER
        );

        public static final MemorySegment ADDR = libremidi_c_h.findOrThrow("libremidi_midi_observer_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int libremidi_midi_observer_new(const libremidi_observer_configuration *, libremidi_api_configuration *, libremidi_midi_observer_handle **)
     * }
     */
    public static FunctionDescriptor libremidi_midi_observer_new$descriptor() {
        return libremidi_midi_observer_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int libremidi_midi_observer_new(const libremidi_observer_configuration *, libremidi_api_configuration *, libremidi_midi_observer_handle **)
     * }
     */
    public static MethodHandle libremidi_midi_observer_new$handle() {
        return libremidi_midi_observer_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int libremidi_midi_observer_new(const libremidi_observer_configuration *, libremidi_api_configuration *, libremidi_midi_observer_handle **)
     * }
     */
    public static MemorySegment libremidi_midi_observer_new$address() {
        return libremidi_midi_observer_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int libremidi_midi_observer_new(const libremidi_observer_configuration *, libremidi_api_configuration *, libremidi_midi_observer_handle **)
     * }
     */
    public static int libremidi_midi_observer_new(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = libremidi_midi_observer_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("libremidi_midi_observer_new", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class libremidi_midi_observer_enumerate_input_ports {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            libremidi_c_h.C_INT,
            libremidi_c_h.C_POINTER,
            libremidi_c_h.C_POINTER,
            libremidi_c_h.C_POINTER
        );

        public static final MemorySegment ADDR = libremidi_c_h.findOrThrow("libremidi_midi_observer_enumerate_input_ports");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int libremidi_midi_observer_enumerate_input_ports(libremidi_midi_observer_handle *, void *context, void (*)(void *, const libremidi_midi_in_port *))
     * }
     */
    public static FunctionDescriptor libremidi_midi_observer_enumerate_input_ports$descriptor() {
        return libremidi_midi_observer_enumerate_input_ports.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int libremidi_midi_observer_enumerate_input_ports(libremidi_midi_observer_handle *, void *context, void (*)(void *, const libremidi_midi_in_port *))
     * }
     */
    public static MethodHandle libremidi_midi_observer_enumerate_input_ports$handle() {
        return libremidi_midi_observer_enumerate_input_ports.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int libremidi_midi_observer_enumerate_input_ports(libremidi_midi_observer_handle *, void *context, void (*)(void *, const libremidi_midi_in_port *))
     * }
     */
    public static MemorySegment libremidi_midi_observer_enumerate_input_ports$address() {
        return libremidi_midi_observer_enumerate_input_ports.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int libremidi_midi_observer_enumerate_input_ports(libremidi_midi_observer_handle *, void *context, void (*)(void *, const libremidi_midi_in_port *))
     * }
     */
    public static int libremidi_midi_observer_enumerate_input_ports(MemorySegment x0, MemorySegment context, MemorySegment x2) {
        var mh$ = libremidi_midi_observer_enumerate_input_ports.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("libremidi_midi_observer_enumerate_input_ports", x0, context, x2);
            }
            return (int)mh$.invokeExact(x0, context, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class libremidi_midi_observer_enumerate_output_ports {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            libremidi_c_h.C_INT,
            libremidi_c_h.C_POINTER,
            libremidi_c_h.C_POINTER,
            libremidi_c_h.C_POINTER
        );

        public static final MemorySegment ADDR = libremidi_c_h.findOrThrow("libremidi_midi_observer_enumerate_output_ports");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int libremidi_midi_observer_enumerate_output_ports(libremidi_midi_observer_handle *, void *context, void (*)(void *, const libremidi_midi_out_port *))
     * }
     */
    public static FunctionDescriptor libremidi_midi_observer_enumerate_output_ports$descriptor() {
        return libremidi_midi_observer_enumerate_output_ports.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int libremidi_midi_observer_enumerate_output_ports(libremidi_midi_observer_handle *, void *context, void (*)(void *, const libremidi_midi_out_port *))
     * }
     */
    public static MethodHandle libremidi_midi_observer_enumerate_output_ports$handle() {
        return libremidi_midi_observer_enumerate_output_ports.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int libremidi_midi_observer_enumerate_output_ports(libremidi_midi_observer_handle *, void *context, void (*)(void *, const libremidi_midi_out_port *))
     * }
     */
    public static MemorySegment libremidi_midi_observer_enumerate_output_ports$address() {
        return libremidi_midi_observer_enumerate_output_ports.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int libremidi_midi_observer_enumerate_output_ports(libremidi_midi_observer_handle *, void *context, void (*)(void *, const libremidi_midi_out_port *))
     * }
     */
    public static int libremidi_midi_observer_enumerate_output_ports(MemorySegment x0, MemorySegment context, MemorySegment x2) {
        var mh$ = libremidi_midi_observer_enumerate_output_ports.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("libremidi_midi_observer_enumerate_output_ports", x0, context, x2);
            }
            return (int)mh$.invokeExact(x0, context, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class libremidi_midi_observer_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            libremidi_c_h.C_INT,
            libremidi_c_h.C_POINTER
        );

        public static final MemorySegment ADDR = libremidi_c_h.findOrThrow("libremidi_midi_observer_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int libremidi_midi_observer_free(libremidi_midi_observer_handle *)
     * }
     */
    public static FunctionDescriptor libremidi_midi_observer_free$descriptor() {
        return libremidi_midi_observer_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int libremidi_midi_observer_free(libremidi_midi_observer_handle *)
     * }
     */
    public static MethodHandle libremidi_midi_observer_free$handle() {
        return libremidi_midi_observer_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int libremidi_midi_observer_free(libremidi_midi_observer_handle *)
     * }
     */
    public static MemorySegment libremidi_midi_observer_free$address() {
        return libremidi_midi_observer_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int libremidi_midi_observer_free(libremidi_midi_observer_handle *)
     * }
     */
    public static int libremidi_midi_observer_free(MemorySegment x0) {
        var mh$ = libremidi_midi_observer_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("libremidi_midi_observer_free", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class libremidi_midi_in_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            libremidi_c_h.C_INT,
            libremidi_c_h.C_POINTER,
            libremidi_c_h.C_POINTER,
            libremidi_c_h.C_POINTER
        );

        public static final MemorySegment ADDR = libremidi_c_h.findOrThrow("libremidi_midi_in_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int libremidi_midi_in_new(const libremidi_midi_configuration *, const libremidi_api_configuration *, libremidi_midi_in_handle **)
     * }
     */
    public static FunctionDescriptor libremidi_midi_in_new$descriptor() {
        return libremidi_midi_in_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int libremidi_midi_in_new(const libremidi_midi_configuration *, const libremidi_api_configuration *, libremidi_midi_in_handle **)
     * }
     */
    public static MethodHandle libremidi_midi_in_new$handle() {
        return libremidi_midi_in_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int libremidi_midi_in_new(const libremidi_midi_configuration *, const libremidi_api_configuration *, libremidi_midi_in_handle **)
     * }
     */
    public static MemorySegment libremidi_midi_in_new$address() {
        return libremidi_midi_in_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int libremidi_midi_in_new(const libremidi_midi_configuration *, const libremidi_api_configuration *, libremidi_midi_in_handle **)
     * }
     */
    public static int libremidi_midi_in_new(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = libremidi_midi_in_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("libremidi_midi_in_new", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class libremidi_midi_in_is_connected {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            libremidi_c_h.C_INT,
            libremidi_c_h.C_POINTER
        );

        public static final MemorySegment ADDR = libremidi_c_h.findOrThrow("libremidi_midi_in_is_connected");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int libremidi_midi_in_is_connected(const libremidi_midi_in_handle *)
     * }
     */
    public static FunctionDescriptor libremidi_midi_in_is_connected$descriptor() {
        return libremidi_midi_in_is_connected.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int libremidi_midi_in_is_connected(const libremidi_midi_in_handle *)
     * }
     */
    public static MethodHandle libremidi_midi_in_is_connected$handle() {
        return libremidi_midi_in_is_connected.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int libremidi_midi_in_is_connected(const libremidi_midi_in_handle *)
     * }
     */
    public static MemorySegment libremidi_midi_in_is_connected$address() {
        return libremidi_midi_in_is_connected.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int libremidi_midi_in_is_connected(const libremidi_midi_in_handle *)
     * }
     */
    public static int libremidi_midi_in_is_connected(MemorySegment x0) {
        var mh$ = libremidi_midi_in_is_connected.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("libremidi_midi_in_is_connected", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class libremidi_midi_in_absolute_timestamp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            libremidi_c_h.C_LONG_LONG,
            libremidi_c_h.C_POINTER
        );

        public static final MemorySegment ADDR = libremidi_c_h.findOrThrow("libremidi_midi_in_absolute_timestamp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * libremidi_timestamp libremidi_midi_in_absolute_timestamp(libremidi_midi_in_handle *)
     * }
     */
    public static FunctionDescriptor libremidi_midi_in_absolute_timestamp$descriptor() {
        return libremidi_midi_in_absolute_timestamp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * libremidi_timestamp libremidi_midi_in_absolute_timestamp(libremidi_midi_in_handle *)
     * }
     */
    public static MethodHandle libremidi_midi_in_absolute_timestamp$handle() {
        return libremidi_midi_in_absolute_timestamp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * libremidi_timestamp libremidi_midi_in_absolute_timestamp(libremidi_midi_in_handle *)
     * }
     */
    public static MemorySegment libremidi_midi_in_absolute_timestamp$address() {
        return libremidi_midi_in_absolute_timestamp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * libremidi_timestamp libremidi_midi_in_absolute_timestamp(libremidi_midi_in_handle *)
     * }
     */
    public static long libremidi_midi_in_absolute_timestamp(MemorySegment x0) {
        var mh$ = libremidi_midi_in_absolute_timestamp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("libremidi_midi_in_absolute_timestamp", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class libremidi_midi_in_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            libremidi_c_h.C_INT,
            libremidi_c_h.C_POINTER
        );

        public static final MemorySegment ADDR = libremidi_c_h.findOrThrow("libremidi_midi_in_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int libremidi_midi_in_free(libremidi_midi_in_handle *)
     * }
     */
    public static FunctionDescriptor libremidi_midi_in_free$descriptor() {
        return libremidi_midi_in_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int libremidi_midi_in_free(libremidi_midi_in_handle *)
     * }
     */
    public static MethodHandle libremidi_midi_in_free$handle() {
        return libremidi_midi_in_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int libremidi_midi_in_free(libremidi_midi_in_handle *)
     * }
     */
    public static MemorySegment libremidi_midi_in_free$address() {
        return libremidi_midi_in_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int libremidi_midi_in_free(libremidi_midi_in_handle *)
     * }
     */
    public static int libremidi_midi_in_free(MemorySegment x0) {
        var mh$ = libremidi_midi_in_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("libremidi_midi_in_free", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class libremidi_midi_out_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            libremidi_c_h.C_INT,
            libremidi_c_h.C_POINTER,
            libremidi_c_h.C_POINTER,
            libremidi_c_h.C_POINTER
        );

        public static final MemorySegment ADDR = libremidi_c_h.findOrThrow("libremidi_midi_out_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int libremidi_midi_out_new(const libremidi_midi_configuration *, const libremidi_api_configuration *, libremidi_midi_out_handle **)
     * }
     */
    public static FunctionDescriptor libremidi_midi_out_new$descriptor() {
        return libremidi_midi_out_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int libremidi_midi_out_new(const libremidi_midi_configuration *, const libremidi_api_configuration *, libremidi_midi_out_handle **)
     * }
     */
    public static MethodHandle libremidi_midi_out_new$handle() {
        return libremidi_midi_out_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int libremidi_midi_out_new(const libremidi_midi_configuration *, const libremidi_api_configuration *, libremidi_midi_out_handle **)
     * }
     */
    public static MemorySegment libremidi_midi_out_new$address() {
        return libremidi_midi_out_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int libremidi_midi_out_new(const libremidi_midi_configuration *, const libremidi_api_configuration *, libremidi_midi_out_handle **)
     * }
     */
    public static int libremidi_midi_out_new(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = libremidi_midi_out_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("libremidi_midi_out_new", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class libremidi_midi_out_is_connected {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            libremidi_c_h.C_INT,
            libremidi_c_h.C_POINTER
        );

        public static final MemorySegment ADDR = libremidi_c_h.findOrThrow("libremidi_midi_out_is_connected");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int libremidi_midi_out_is_connected(const libremidi_midi_out_handle *)
     * }
     */
    public static FunctionDescriptor libremidi_midi_out_is_connected$descriptor() {
        return libremidi_midi_out_is_connected.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int libremidi_midi_out_is_connected(const libremidi_midi_out_handle *)
     * }
     */
    public static MethodHandle libremidi_midi_out_is_connected$handle() {
        return libremidi_midi_out_is_connected.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int libremidi_midi_out_is_connected(const libremidi_midi_out_handle *)
     * }
     */
    public static MemorySegment libremidi_midi_out_is_connected$address() {
        return libremidi_midi_out_is_connected.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int libremidi_midi_out_is_connected(const libremidi_midi_out_handle *)
     * }
     */
    public static int libremidi_midi_out_is_connected(MemorySegment x0) {
        var mh$ = libremidi_midi_out_is_connected.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("libremidi_midi_out_is_connected", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class libremidi_midi_out_send_message {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            libremidi_c_h.C_INT,
            libremidi_c_h.C_POINTER,
            libremidi_c_h.C_POINTER,
            libremidi_c_h.C_LONG
        );

        public static final MemorySegment ADDR = libremidi_c_h.findOrThrow("libremidi_midi_out_send_message");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int libremidi_midi_out_send_message(libremidi_midi_out_handle *, const midi1_symbol *, size_t)
     * }
     */
    public static FunctionDescriptor libremidi_midi_out_send_message$descriptor() {
        return libremidi_midi_out_send_message.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int libremidi_midi_out_send_message(libremidi_midi_out_handle *, const midi1_symbol *, size_t)
     * }
     */
    public static MethodHandle libremidi_midi_out_send_message$handle() {
        return libremidi_midi_out_send_message.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int libremidi_midi_out_send_message(libremidi_midi_out_handle *, const midi1_symbol *, size_t)
     * }
     */
    public static MemorySegment libremidi_midi_out_send_message$address() {
        return libremidi_midi_out_send_message.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int libremidi_midi_out_send_message(libremidi_midi_out_handle *, const midi1_symbol *, size_t)
     * }
     */
    public static int libremidi_midi_out_send_message(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = libremidi_midi_out_send_message.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("libremidi_midi_out_send_message", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class libremidi_midi_out_send_ump {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            libremidi_c_h.C_INT,
            libremidi_c_h.C_POINTER,
            libremidi_c_h.C_POINTER,
            libremidi_c_h.C_LONG
        );

        public static final MemorySegment ADDR = libremidi_c_h.findOrThrow("libremidi_midi_out_send_ump");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int libremidi_midi_out_send_ump(libremidi_midi_out_handle *, const midi2_symbol *, size_t)
     * }
     */
    public static FunctionDescriptor libremidi_midi_out_send_ump$descriptor() {
        return libremidi_midi_out_send_ump.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int libremidi_midi_out_send_ump(libremidi_midi_out_handle *, const midi2_symbol *, size_t)
     * }
     */
    public static MethodHandle libremidi_midi_out_send_ump$handle() {
        return libremidi_midi_out_send_ump.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int libremidi_midi_out_send_ump(libremidi_midi_out_handle *, const midi2_symbol *, size_t)
     * }
     */
    public static MemorySegment libremidi_midi_out_send_ump$address() {
        return libremidi_midi_out_send_ump.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int libremidi_midi_out_send_ump(libremidi_midi_out_handle *, const midi2_symbol *, size_t)
     * }
     */
    public static int libremidi_midi_out_send_ump(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = libremidi_midi_out_send_ump.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("libremidi_midi_out_send_ump", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class libremidi_midi_out_schedule_message {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            libremidi_c_h.C_INT,
            libremidi_c_h.C_POINTER,
            libremidi_c_h.C_LONG_LONG,
            libremidi_c_h.C_POINTER,
            libremidi_c_h.C_LONG
        );

        public static final MemorySegment ADDR = libremidi_c_h.findOrThrow("libremidi_midi_out_schedule_message");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int libremidi_midi_out_schedule_message(libremidi_midi_out_handle *, int64_t ts, const midi1_symbol *, size_t)
     * }
     */
    public static FunctionDescriptor libremidi_midi_out_schedule_message$descriptor() {
        return libremidi_midi_out_schedule_message.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int libremidi_midi_out_schedule_message(libremidi_midi_out_handle *, int64_t ts, const midi1_symbol *, size_t)
     * }
     */
    public static MethodHandle libremidi_midi_out_schedule_message$handle() {
        return libremidi_midi_out_schedule_message.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int libremidi_midi_out_schedule_message(libremidi_midi_out_handle *, int64_t ts, const midi1_symbol *, size_t)
     * }
     */
    public static MemorySegment libremidi_midi_out_schedule_message$address() {
        return libremidi_midi_out_schedule_message.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int libremidi_midi_out_schedule_message(libremidi_midi_out_handle *, int64_t ts, const midi1_symbol *, size_t)
     * }
     */
    public static int libremidi_midi_out_schedule_message(MemorySegment x0, long ts, MemorySegment x2, long x3) {
        var mh$ = libremidi_midi_out_schedule_message.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("libremidi_midi_out_schedule_message", x0, ts, x2, x3);
            }
            return (int)mh$.invokeExact(x0, ts, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class libremidi_midi_out_schedule_ump {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            libremidi_c_h.C_INT,
            libremidi_c_h.C_POINTER,
            libremidi_c_h.C_LONG_LONG,
            libremidi_c_h.C_POINTER,
            libremidi_c_h.C_LONG
        );

        public static final MemorySegment ADDR = libremidi_c_h.findOrThrow("libremidi_midi_out_schedule_ump");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int libremidi_midi_out_schedule_ump(libremidi_midi_out_handle *, int64_t ts, const midi2_symbol *, size_t)
     * }
     */
    public static FunctionDescriptor libremidi_midi_out_schedule_ump$descriptor() {
        return libremidi_midi_out_schedule_ump.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int libremidi_midi_out_schedule_ump(libremidi_midi_out_handle *, int64_t ts, const midi2_symbol *, size_t)
     * }
     */
    public static MethodHandle libremidi_midi_out_schedule_ump$handle() {
        return libremidi_midi_out_schedule_ump.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int libremidi_midi_out_schedule_ump(libremidi_midi_out_handle *, int64_t ts, const midi2_symbol *, size_t)
     * }
     */
    public static MemorySegment libremidi_midi_out_schedule_ump$address() {
        return libremidi_midi_out_schedule_ump.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int libremidi_midi_out_schedule_ump(libremidi_midi_out_handle *, int64_t ts, const midi2_symbol *, size_t)
     * }
     */
    public static int libremidi_midi_out_schedule_ump(MemorySegment x0, long ts, MemorySegment x2, long x3) {
        var mh$ = libremidi_midi_out_schedule_ump.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("libremidi_midi_out_schedule_ump", x0, ts, x2, x3);
            }
            return (int)mh$.invokeExact(x0, ts, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class libremidi_midi_out_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            libremidi_c_h.C_INT,
            libremidi_c_h.C_POINTER
        );

        public static final MemorySegment ADDR = libremidi_c_h.findOrThrow("libremidi_midi_out_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int libremidi_midi_out_free(libremidi_midi_out_handle *)
     * }
     */
    public static FunctionDescriptor libremidi_midi_out_free$descriptor() {
        return libremidi_midi_out_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int libremidi_midi_out_free(libremidi_midi_out_handle *)
     * }
     */
    public static MethodHandle libremidi_midi_out_free$handle() {
        return libremidi_midi_out_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int libremidi_midi_out_free(libremidi_midi_out_handle *)
     * }
     */
    public static MemorySegment libremidi_midi_out_free$address() {
        return libremidi_midi_out_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int libremidi_midi_out_free(libremidi_midi_out_handle *)
     * }
     */
    public static int libremidi_midi_out_free(MemorySegment x0) {
        var mh$ = libremidi_midi_out_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("libremidi_midi_out_free", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final MemorySegment NULL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define NULL (void*) 0
     * }
     */
    public static MemorySegment NULL() {
        return NULL;
    }
    /**
     * {@snippet lang=c :
     * #define __DARWIN_SUF_EXTSN "$DARWIN_EXTSN"
     * }
     */
    public static MemorySegment __DARWIN_SUF_EXTSN() {
        class Holder {
            static final MemorySegment __DARWIN_SUF_EXTSN
                = libremidi_c_h.LIBRARY_ARENA.allocateFrom("$DARWIN_EXTSN");
        }
        return Holder.__DARWIN_SUF_EXTSN;
    }
    private static final long __DARWIN_C_ANSI = 4096L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_C_ANSI 4096
     * }
     */
    public static long __DARWIN_C_ANSI() {
        return __DARWIN_C_ANSI;
    }
    private static final long __DARWIN_C_FULL = 900000L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_C_FULL 900000
     * }
     */
    public static long __DARWIN_C_FULL() {
        return __DARWIN_C_FULL;
    }
    private static final long __DARWIN_C_LEVEL = 900000L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_C_LEVEL 900000
     * }
     */
    public static long __DARWIN_C_LEVEL() {
        return __DARWIN_C_LEVEL;
    }
    private static final MemorySegment __DARWIN_NULL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define __DARWIN_NULL (void*) 0
     * }
     */
    public static MemorySegment __DARWIN_NULL() {
        return __DARWIN_NULL;
    }
    private static final long USER_ADDR_NULL = 0L;
    /**
     * {@snippet lang=c :
     * #define USER_ADDR_NULL 0
     * }
     */
    public static long USER_ADDR_NULL() {
        return USER_ADDR_NULL;
    }
    private static final long INT64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT64_MAX 9223372036854775807
     * }
     */
    public static long INT64_MAX() {
        return INT64_MAX;
    }
    private static final int INT8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT8_MIN -128
     * }
     */
    public static int INT8_MIN() {
        return INT8_MIN;
    }
    private static final int INT16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT16_MIN -32768
     * }
     */
    public static int INT16_MIN() {
        return INT16_MIN;
    }
    private static final int INT32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT32_MIN -2147483648
     * }
     */
    public static int INT32_MIN() {
        return INT32_MIN;
    }
    private static final long INT64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT64_MIN -9223372036854775808
     * }
     */
    public static long INT64_MIN() {
        return INT64_MIN;
    }
    private static final int UINT32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT32_MAX 4294967295
     * }
     */
    public static int UINT32_MAX() {
        return UINT32_MAX;
    }
    private static final long UINT64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT64_MAX -1
     * }
     */
    public static long UINT64_MAX() {
        return UINT64_MAX;
    }
    private static final int INT_LEAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MIN -128
     * }
     */
    public static int INT_LEAST8_MIN() {
        return INT_LEAST8_MIN;
    }
    private static final int INT_LEAST16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MIN -32768
     * }
     */
    public static int INT_LEAST16_MIN() {
        return INT_LEAST16_MIN;
    }
    private static final int INT_LEAST32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MIN -2147483648
     * }
     */
    public static int INT_LEAST32_MIN() {
        return INT_LEAST32_MIN;
    }
    private static final long INT_LEAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_LEAST64_MIN() {
        return INT_LEAST64_MIN;
    }
    private static final int INT_LEAST8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MAX 127
     * }
     */
    public static int INT_LEAST8_MAX() {
        return INT_LEAST8_MAX;
    }
    private static final int INT_LEAST16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MAX 32767
     * }
     */
    public static int INT_LEAST16_MAX() {
        return INT_LEAST16_MAX;
    }
    private static final int INT_LEAST32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MAX 2147483647
     * }
     */
    public static int INT_LEAST32_MAX() {
        return INT_LEAST32_MAX;
    }
    private static final long INT_LEAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_LEAST64_MAX() {
        return INT_LEAST64_MAX;
    }
    private static final int UINT_LEAST8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST8_MAX 255
     * }
     */
    public static int UINT_LEAST8_MAX() {
        return UINT_LEAST8_MAX;
    }
    private static final int UINT_LEAST16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST16_MAX 65535
     * }
     */
    public static int UINT_LEAST16_MAX() {
        return UINT_LEAST16_MAX;
    }
    private static final int UINT_LEAST32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST32_MAX 4294967295
     * }
     */
    public static int UINT_LEAST32_MAX() {
        return UINT_LEAST32_MAX;
    }
    private static final long UINT_LEAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST64_MAX -1
     * }
     */
    public static long UINT_LEAST64_MAX() {
        return UINT_LEAST64_MAX;
    }
    private static final int INT_FAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MIN -128
     * }
     */
    public static int INT_FAST8_MIN() {
        return INT_FAST8_MIN;
    }
    private static final int INT_FAST16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MIN -32768
     * }
     */
    public static int INT_FAST16_MIN() {
        return INT_FAST16_MIN;
    }
    private static final int INT_FAST32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MIN -2147483648
     * }
     */
    public static int INT_FAST32_MIN() {
        return INT_FAST32_MIN;
    }
    private static final long INT_FAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST64_MIN() {
        return INT_FAST64_MIN;
    }
    private static final int INT_FAST8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MAX 127
     * }
     */
    public static int INT_FAST8_MAX() {
        return INT_FAST8_MAX;
    }
    private static final int INT_FAST16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MAX 32767
     * }
     */
    public static int INT_FAST16_MAX() {
        return INT_FAST16_MAX;
    }
    private static final int INT_FAST32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MAX 2147483647
     * }
     */
    public static int INT_FAST32_MAX() {
        return INT_FAST32_MAX;
    }
    private static final long INT_FAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST64_MAX() {
        return INT_FAST64_MAX;
    }
    private static final int UINT_FAST8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST8_MAX 255
     * }
     */
    public static int UINT_FAST8_MAX() {
        return UINT_FAST8_MAX;
    }
    private static final int UINT_FAST16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST16_MAX 65535
     * }
     */
    public static int UINT_FAST16_MAX() {
        return UINT_FAST16_MAX;
    }
    private static final int UINT_FAST32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST32_MAX 4294967295
     * }
     */
    public static int UINT_FAST32_MAX() {
        return UINT_FAST32_MAX;
    }
    private static final long UINT_FAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST64_MAX -1
     * }
     */
    public static long UINT_FAST64_MAX() {
        return UINT_FAST64_MAX;
    }
    private static final long INTPTR_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MAX 9223372036854775807
     * }
     */
    public static long INTPTR_MAX() {
        return INTPTR_MAX;
    }
    private static final long INTPTR_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MIN -9223372036854775808
     * }
     */
    public static long INTPTR_MIN() {
        return INTPTR_MIN;
    }
    private static final long UINTPTR_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTPTR_MAX -1
     * }
     */
    public static long UINTPTR_MAX() {
        return UINTPTR_MAX;
    }
    private static final long INTMAX_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MAX 9223372036854775807
     * }
     */
    public static long INTMAX_MAX() {
        return INTMAX_MAX;
    }
    private static final long UINTMAX_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTMAX_MAX -1
     * }
     */
    public static long UINTMAX_MAX() {
        return UINTMAX_MAX;
    }
    private static final long INTMAX_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MIN -9223372036854775808
     * }
     */
    public static long INTMAX_MIN() {
        return INTMAX_MIN;
    }
    private static final long PTRDIFF_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MIN -9223372036854775808
     * }
     */
    public static long PTRDIFF_MIN() {
        return PTRDIFF_MIN;
    }
    private static final long PTRDIFF_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MAX 9223372036854775807
     * }
     */
    public static long PTRDIFF_MAX() {
        return PTRDIFF_MAX;
    }
    private static final long SIZE_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define SIZE_MAX -1
     * }
     */
    public static long SIZE_MAX() {
        return SIZE_MAX;
    }
    private static final long RSIZE_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define RSIZE_MAX 9223372036854775807
     * }
     */
    public static long RSIZE_MAX() {
        return RSIZE_MAX;
    }
    private static final int WCHAR_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MAX 2147483647
     * }
     */
    public static int WCHAR_MAX() {
        return WCHAR_MAX;
    }
    private static final int WCHAR_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MIN -2147483648
     * }
     */
    public static int WCHAR_MIN() {
        return WCHAR_MIN;
    }
    private static final int WINT_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define WINT_MIN -2147483648
     * }
     */
    public static int WINT_MIN() {
        return WINT_MIN;
    }
    private static final int WINT_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define WINT_MAX 2147483647
     * }
     */
    public static int WINT_MAX() {
        return WINT_MAX;
    }
    private static final int SIG_ATOMIC_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MIN -2147483648
     * }
     */
    public static int SIG_ATOMIC_MIN() {
        return SIG_ATOMIC_MIN;
    }
    private static final int SIG_ATOMIC_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MAX 2147483647
     * }
     */
    public static int SIG_ATOMIC_MAX() {
        return SIG_ATOMIC_MAX;
    }
}

